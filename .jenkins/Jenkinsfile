pipeline {
    agent none
    environment {
        // Pipeline-wide vars
        name =  "wps-test"
        ver = "0.0.1"
        projTools = "auzhsi-tools"
        projDev = "auzhsi-dev"
        projProd = "auzhsi-prod"
        suffix = "pr-${env.CHANGE_ID}"
        rcToken="https://chat.pathfinder.gov.bc.ca/hooks/7A8RwSpZPDAqc6uXS/z8nRXX43oifYWELkwJKeLj4e86rtyfvtJdqdvjSE3XoK2sri"
    }
    options {
        disableResume()
    }
    stages {
        stage('Startup') {
            agent { label 'build' }
            steps {
                script {
                    def filesInThisCommitAsString = sh(
                        script:"git diff --name-only HEAD~1..HEAD | grep '^.jenkins/' || echo -n ''",
                        returnStatus: false,
                        returnStdout: true
                    ).trim()
                    def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
                    echo "${filesInThisCommitAsString}"
                    if (!currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') && !hasChangesInPath){
                        currentBuild.rawBuild.delete()
                        error("No changes detected in the path ('^.jenkins/')")
                    }
                }
                echo "Aborting all running jobs ..."
                script {
                    abortAllPreviousBuildInProgress(currentBuild)
                }
            }
        }
        stage('Build') {
            agent { label 'build' }
            steps {
                script {
                    sh "GIT_BRANCH=${env.CHANGE_BRANCH} ./openshift/oc_build.sh ${env.CHANGE_ID} apply"
                }
            }
        }
        stage('Deploy (DEV)') {
            agent { label 'deploy' }
            steps {
                script {
                    sh "./openshift/oc_deploy.sh ${env.CHANGE_ID} apply"
                }
            }
        }
        stage('Promote (PROD)') {
            agent { label 'deploy' }
            input {
                message "Should we promote this deployment to PRODUCTION?"
                ok "Yes!"
            }
            steps {
                script {
                    sh "./openshift/oc_promote.sh ${env.CHANGE_ID} apply"
                }
            }
        }
        stage('Post-promote (PROD)') {
            agent { label 'deploy' }
            steps {
                script {
                    sh """
                        echo "TO DO: echo Tag known good prod images, backup databases, backup settings"
                        echo "Update on Rocket.Chat dev channel"
                        curl -X POST -H "Content-Type: application/json" ${rcToken} -d '{"text":"${SUFFIX} deployed to ${projProd}."}' --connect-timeout 30 --max-time 30
                    """
                }
            }
        }
        stage('Cleanup') {
            agent { label 'deploy' }
            steps {
                script {
                    sh "./openshift/oc_cleanup.sh ${env.CHANGE_ID} apply"
                }
            }
        }
    }
}