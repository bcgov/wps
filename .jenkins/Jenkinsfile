pipeline {
    agent none
    environment {
        // Pipeline-wide vars
        name =  "wps-test"
        ver = "0.0.1"
        projTools = "auzhsi-tools"
        projDev = "auzhsi-dev"
        suffix = "pr-${env.CHANGE_ID}"
    }
    options {
        disableResume()
    }
    stages {
        stage('Startup') {
            agent { label 'build' }
            steps {
                script {
                    sh "printenv | sort"
                    def filesInThisCommitAsString = sh(
                        script:"git diff --name-only HEAD~1..HEAD | grep '^.jenkins/' || echo -n ''",
                        returnStatus: false,
                        returnStdout: true
                    ).trim()
                    def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
                    echo "${filesInThisCommitAsString}"
                    if (!currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') && !hasChangesInPath){
                        currentBuild.rawBuild.delete()
                        error("No changes detected in the path ('^.jenkins/')")
                    }
                }
                echo "Aborting all running jobs ..."
                script {
                    abortAllPreviousBuildInProgress(currentBuild)
                }
            }
        }
        stage('Build') {
            agent { label 'build' }
            environment {
                repo = "${env.GIT_URL}".toLowerCase()
                branch = "${env.CHANGE_BRANCH}"
            }
            steps {
                echo "Building ..."
                script {
                    def buildTemplate = sh(
                        script: "oc -n ${projTools} process -f openshift/templates/frontend/frontend-bc.yaml \
                            -p NAME=${name} -p SUFFIX=${suffix} -p VERSION=${ver} \
                            -p GIT_URL=${repo} -p GIT_REF=${branch} \
                        ",
                        returnStatus: false,
                        returnStdout: true
                    ).trim()
                    echo "TEMPLATE: \n${buildTemplate}"
                    def buildResult = sh(
                        script: "oc -n ${projTools} process -f openshift/templates/frontend/frontend-bc.yaml \
                            -p NAME=${name} -p SUFFIX=${suffix} -p VERSION=${ver} \
                            -p GIT_URL=${repo} -p GIT_REF=${branch} \
                            | oc -n ${projTools} apply -f - \
                        ",
                        returnStatus: false,
                        returnStdout: true
                    ).trim()
                    echo "TEMPLATE_RESULT: \n${buildResult}"
                }
            }
        }
        stage('Deploy (DEV)') {
            agent { label 'deploy' }
            steps {
                echo "Deploying ..."
                script{
                    def deployTemplate = sh(
                        script: "oc -n ${projTools} process -f openshift/templates/frontend/frontend-dc.yaml \
                            -p NAME=${name} -p SUFFIX=${suffix} -p VERSION=${ver} \
                            -p CPU_REQUEST=500m -p CPU_LIMIT=500m -p MEMORY_REQUEST=1Gi -p MEMORY_LIMIT=1Gi \
                        ",
                        returnStatus: false,
                        returnStdout: true
                    ).trim()
                    echo "TEMPLATE: \n${deployTemplate}"
                    def deployResult = sh(
                        script: "oc -n ${projTools} process -f openshift/templates/frontend/frontend-dc.yaml \
                            -p NAME=${name} -p SUFFIX=${suffix} -p VERSION=${ver} \
                            -p CPU_REQUEST=500m -p CPU_LIMIT=500m -p MEMORY_REQUEST=1Gi -p MEMORY_LIMIT=1Gi \
                            | oc -n ${projDev} apply -f - \
                        ",
                        returnStatus: false,
                        returnStdout: true
                    ).trim()
                    echo "TEMPLATE_RESULT: \n${deployResult}"
                }

            }
        }
        stage('Deploy (PROD)') {
            agent { label 'deploy' }
            input {
                message "Should we continue with deployment to PROD?"
                ok "Yes!"
            }
            steps {
                echo "Deploying ..."
                // sh "cd .jenkins/.pipeline && ./npmw ci && ./npmw run deploy -- --pr=${CHANGE_ID} --env=prod"
            }
        }
        stage('Acceptance') {
            agent { label 'deploy' }
            input {
                message "Should we continue with cleanup?"
                ok "Yes!"
            }
            steps {
                echo "Cleaning ..."
            }
        }
    }
}