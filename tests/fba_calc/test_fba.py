"""
Unit tests for fire behavour calculator.

NOTE: Regarding the json files used in these tests:
The JSON request files were manually generated referencing requests generated by the user interface by
inspecting the network tab.
The JSON response files were generated by copying the "actual" output of the tests.
Running the test with this syntax `pytest app/tests/fba/test_fba.py -s` will result in actual vs. expected
JSON to be printed out to screen. If the tests are failing, a developer can inspect the JSON and establish
if the change in output is due to a bug, or due to a valid change.
"""
from typing import Tuple
from pytest_bdd import scenario, given, parsers
from fastapi.testclient import TestClient
from aiohttp import ClientSession
import pytest
import app.main
from tests.common import default_mock_client_get
from tests import load_json_file_with_name


@pytest.mark.usefixtures('mock_jwt_decode')
@scenario('test_fba.feature', 'Fire Behaviour Calculation')
def test_fire_behaviour_calculator_scenario():
    """ BDD Scenario. """


@given(parsers.parse("I received a fba-calc {request_json}"),
       target_fixture='response',
       converters={'request_json': load_json_file_with_name(__file__)})
def given_request(monkeypatch, request_json: Tuple[dict, str]):
    """ Handle request
    Our request should result in
    1) station list requests to WFWX, to map station codes to GUIDs.
    2) dailies call to WFWX.
    3) call to the R code to calculate values.
    """
    # mock anything that uses aiohttp.ClientSession::get
    monkeypatch.setattr(ClientSession, 'get', default_mock_client_get)

    client = TestClient(app.main.app)
    headers = {'Content-Type': 'application/json',
               'Authorization': 'Bearer token'}
    return {
        'response': client.post('/api/fba-calc/stations', headers=headers, json=request_json[0]),
        'filename': request_json[1]
    }
