# NOTE:
# This Dockerfile is for local development only!

# this is generated and published from the base container in openshift/wips-api-base
FROM ghcr.io/bcgov/wps/wps-api-base:latest

ARG USERNAME=ubuntu # default 1000 user from the base image

# Tell r-base not to wait for interactive input.
ENV DEBIAN_FRONTEND=noninteractive
USER root

# Install dependancies needed by python developer packages
# One should really run all these installs and the update in one go - for a consistent install
# but ease of development trumps consistency in this instance: it's easer to have more
# faster running steps that can fail, that one big monster install that takes forever 
# and fails.
# NOTE: Once we no longer need pyodbc, please remove the apt-get update and install commands below.
RUN apt-get -y update
#RUN apt-get -y install unixodbc-dev
# Install old (2.4.*; current debian) version of gdal
RUN apt-get -y install libgdal-dev
# Dependency required for installation of cffdrs
RUN apt-get -y install libudunits2-dev

# Install JDK
RUN apt-get -y install openjdk-11-jdk

# Create a directory for the app to run in, and grant worker access
RUN mkdir /app
RUN chown "$USERNAME" /app
WORKDIR /app
USER $USERNAME

# Copy poetry files.
COPY --chown=$USERNAME:$USER_GID ./api/pyproject.toml ./api/poetry.lock /app/
# Copy the app:
COPY ./api/app /app/app
# clobber any existing venv if its present or it will break stuff
RUN rm -rf /app/app/.venv
# TODO: we need to do this better.
RUN mkdir /app/advisory
COPY ./api/advisory /app/advisory
# Copy java libs:
RUN mkdir /app/libs
COPY ./api/libs /app/libs
# Copy alembic:
COPY ./api/alembic /app/alembic
COPY ./api/alembic.ini /app
# Copy pre-start.sh (it will be run on startup):
COPY ./api/prestart.sh /app
COPY ./api/start.sh /app

# Install dependencies.
RUN poetry install --without dev

RUN poetry run python -m pip install -U setuptools wheel
# Get a python binding for gdal that matches the version of gdal we have installed.
RUN poetry run python -m pip install --no-build-isolation --no-cache-dir --force-reinstall gdal==$(gdal-config --version)

EXPOSE 8080 3000

ENV CLASSPATH=/app/libs/REDapp_Lib.jar:/app/libs/WTime.jar:/app/libs/hss-java.jar

# puts us in the app folder when we open the terminal in vscode instead of the /workspace folder
RUN echo "cd /app" >> ~/.bashrc

# you can run this below in the container and it should run the app
# CMD PYTHONPATH=. poetry run alembic upgrade head && poetry run uvicorn app.main:app --host 0.0.0.0 --reload --port 8080

