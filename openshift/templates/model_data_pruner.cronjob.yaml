kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: ${JOB_NAME}-cronjob-template
  annotations:
    description: "Scheduled task to prune old model data from the database."
    tags: "cronjob,model-data-pruner"
labels:
  app.kubernetes.io/part-of: "${NAME}"
  app: ${APP_LABEL}
parameters:
  - name: NAME
    description: Module name
    value: wps
  - name: GLOBAL_NAME
    description: Name of global Module
    value: wps-global
  - name: SUFFIX
    description: Deployment suffix, e.g. pr-###
    required: true
  - name: PROJ_TOOLS
    value: e1e498-tools
  - name: IMAGE_REGISTRY
    value: image-registry.openshift-image-registry.svc:5000
  - name: JOB_NAME
    value: model-data-pruner
  - name: SCHEDULE
    # run every 10th minute
    value: "*/10 * * * *"
    required: true
  - name: POSTGRES_WRITE_HOST
    required: true
    value: patroni-${NAME}-${SUFFIX}-leader
  - name: POSTGRES_READ_HOST
    value: patroni-${NAME}-${SUFFIX}-replica
  - name: POSTGRES_USER
    required: true
    value: ${NAME}-${SUFFIX}
  - name: POSTGRES_DATABASE
    required: true
    value: ${NAME}-${SUFFIX}
  - name: APP_LABEL
    required: true
    value: wps-${SUFFIX}
objects:
  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      name: ${JOB_NAME}
      labels:
        cronjob: ${JOB_NAME}
    spec:
      schedule: ${SCHEDULE}
      concurrencyPolicy: "Replace"
      jobTemplate:
        metadata:
          labels:
            cronjob: ${JOB_NAME}
            app: ${APP_LABEL}
        spec:
          template:
            spec:
              containers:
                - name: ${JOB_NAME}
                  image: ${IMAGE_REGISTRY}/${PROJ_TOOLS}/${NAME}-${SUFFIX}:${SUFFIX}
                  imagePullPolicy: "Always"
                  command:
                    [
                      "poetry",
                      "run",
                      "python",
                      "-m",
                      "app.jobs.model_data_pruner",
                    ]
                  env:
                    - name: POSTGRES_READ_USER
                      value: ${POSTGRES_USER}
                    - name: POSTGRES_WRITE_USER
                      value: ${POSTGRES_USER}
                    - name: POSTGRES_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: app-db-password
                    - name: POSTGRES_WRITE_HOST
                      value: ${POSTGRES_WRITE_HOST}
                    - name: POSTGRES_READ_HOST
                      value: ${POSTGRES_READ_HOST}
                    - name: POSTGRES_PORT
                      value: "5432"
                    - name: POSTGRES_DATABASE
                      value: ${POSTGRES_DATABASE}
                    - name: ROCKET_URL_POST_MESSAGE
                      valueFrom:
                        configMapKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-url-post-message
                    - name: ROCKET_CHANNEL
                      valueFrom:
                        configMapKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-channel
                    - name: ROCKET_USER_ID
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-user-id-secret
                    - name: ROCKET_AUTH_TOKEN
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-auth-token-secret

              restartPolicy: OnFailure
