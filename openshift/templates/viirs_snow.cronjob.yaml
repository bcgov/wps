kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: ${JOB_NAME}-cronjob-template
  annotations:
    description: "Scheduled task to download and process VIIRS snow data from the Nasa Snow and Ice Data Centre."
    tags: "cronjob,viirs,snow"
labels:
  app.kubernetes.io/part-of: "${NAME}"
  app: ${NAME}-${SUFFIX}
parameters:
  - name: NAME
    description: Module name
    value: wps
  - name: GLOBAL_NAME
    description: Name of global Module
    value: wps-global
  - name: SUFFIX
    description: Deployment suffix, e.g. pr-###
    required: true
  - name: PROJ_TOOLS
    value: e1e498-tools
  - name: JOB_NAME
    value: viirs-snow
  - name: IMAGE_REGISTRY
    required: true
    value: image-registry.openshift-image-registry.svc:5000
  - name: POSTGRES_DATABASE
    required: true
  - name: CRUNCHYDB_USER
    required: true
  - name: SCHEDULE
    required: true
  - name: APP_LABEL
    required: true
objects:
  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      name: ${JOB_NAME}
    spec:
      schedule: ${SCHEDULE}
      # We use the "Replace" policy, because we never want the cronjobs to run concurrently,
      # and if for whatever reason a cronjob gets stuck, we want the next run to proceed.
      # If we were to use Forbid, and a cronjob gets stuck, then we'd stop gathering data until someone
      # noticed. We don't want that.
      concurrencyPolicy: "Replace"
      jobTemplate:
        metadata:
          labels:
            cronjob: ${JOB_NAME}
            app: ${APP_LABEL}
        spec:
          template:
            spec:
              containers:
                - name: ${JOB_NAME}
                  image: ${IMAGE_REGISTRY}/${PROJ_TOOLS}/${NAME}-api-${SUFFIX}:${SUFFIX}
                  imagePullPolicy: "Always"
                  command:
                    ["poetry", "run", "python", "-m", "app.jobs.viirs_snow"]
                  env:
                    - name: POSTGRES_READ_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${CRUNCHYDB_USER}
                          key: user
                    - name: POSTGRES_WRITE_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${CRUNCHYDB_USER}
                          key: user
                    - name: POSTGRES_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${CRUNCHYDB_USER}
                          key: password
                    - name: POSTGRES_WRITE_HOST
                      valueFrom:
                        secretKeyRef:
                          name: ${CRUNCHYDB_USER}
                          key: pgbouncer-host
                    - name: POSTGRES_READ_HOST
                      valueFrom:
                        secretKeyRef:
                          name: ${CRUNCHYDB_USER}
                          key: pgbouncer-host
                    - name: POSTGRES_PORT
                      valueFrom:
                        secretKeyRef:
                          name: ${CRUNCHYDB_USER}
                          key: pgbouncer-port
                    - name: POSTGRES_DATABASE
                      value: ${POSTGRES_DATABASE}
                    - name: ROCKET_URL_POST_MESSAGE
                      valueFrom:
                        configMapKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-url-post-message
                    - name: ROCKET_CHANNEL
                      valueFrom:
                        configMapKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-channel
                    - name: ROCKET_USER_ID
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-user-id-secret
                    - name: ROCKET_AUTH_TOKEN
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: rocket.chat-auth-token-secret
                    - name: NASA_EARTHDATA_USER
                      valueFrom:
                        configMapKeyRef:
                          name: ${GLOBAL_NAME}
                          key: env.nasa-earthdata-user
                    - name: NASA_EARTHDATA_PWD
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: nasa-earthdata-pwd
                    - name: OBJECT_STORE_SERVER
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-server
                    - name: OBJECT_STORE_USER_ID
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-user-id
                    - name: OBJECT_STORE_SECRET
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-secret
                    - name: OBJECT_STORE_BUCKET
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-bucket
                  resources:
                    limits:
                      cpu: "2"
                      memory: 2048Mi
                    requests:
                      cpu: "500m"
                      memory: 512Mi
              restartPolicy: OnFailure
