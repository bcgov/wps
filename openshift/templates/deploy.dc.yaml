apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    openshift.io/display-name: "wps"
    description: "Wildfire Predictive Services - API"
    openshift.io/long-description: "Wildfire Predictive Services - API"
    tags: "wps"
    iconClass: icon-js
    openshift.io/provider-display-name: "Government of British Columbia"
    openshift.io/documentation-url: "https://github.com/bcgov/wps"
    openshift.io/support-url: "https://github.com/bcgov/wps"
labels:
  app.kubernetes.io/part-of: "${NAME}"
  app: ${NAME}-${SUFFIX}
parameters:
  - name: NAME
    description: Module name
  - name: GLOBAL_NAME
    description: Global configuration name
    value: wps-global
  - name: SUFFIX
    description: Deployment suffix, e.g. pr-###
    required: true
  - name: PROJ_TOOLS
    value: e1e498-tools
  - name: CPU_REQUEST
    description: Requested CPU
    value: 100m
  - name: CPU_LIMIT
    description: CPU upper limit
    value: 500m
  - name: MEMORY_REQUEST
    description: Requested memory
    value: 2Gi
  - name: MEMORY_LIMIT
    description: Memory upper limit
    value: 3Gi
  - name: REPLICAS
    description: Number of replicas (pods)
    value: "2"
  - name: ALLOWED_ORIGINS
    value: wps-*.apps.silver.devops.gov.bc.ca
  - name: WFWX_MAX_PAGE_SIZE
    description: Maximum number of entities to request at a time from the WFWX API
    value: "1000"
  - name: PROJECT_NAMESPACE
    description: Openshift project namespace. Used for /health check
    required: true
  - name: IMAGE_REGISTRY
    description: Location where images are to be pulled
    value: image-registry.openshift-image-registry.svc:5000
    required: true
  - name: POSTGRES_USER
    description: Postgres DB username
    required: True
  - name: POSTGRES_DATABASE
    description: Postgres DB name
    required: True
  - name: SECOND_LEVEL_DOMAIN
    description: The domain of which this application hangs.
    required: True
    value: apps.silver.devops.gov.bc.ca
  - name: POSTGRES_WRITE_HOST
    required: True
  - name: POSTGRES_READ_HOST
    required: True
  - name: ENVIRONMENT
    description: Can be used to modify route (e.g. when deploying to test)
    value: ""
  - name: USE_WFWX
    value: "False"
  - name: VANITY_DOMAIN
    requests: True
  - name: WORKERS_PER_CORE
    description: "Number of workers per core. e.g. openshift pods report having 32 cores, so 0.125 would give you 4 workers total."
    value: "0.125"
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        name: ${NAME}-${SUFFIX}
      strategy:
        type: Rolling
      triggers: []
      template:
        metadata:
          labels:
            name: ${NAME}-${SUFFIX}
        spec:
          automountServiceAccountToken: false
          containers:
            - image: ${IMAGE_REGISTRY}/${PROJ_TOOLS}/${NAME}-${SUFFIX}:${SUFFIX}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: ORIGINS
                  value: ${ALLOWED_ORIGINS}
                - name: BASE_URI
                  value: https://${NAME}-${SUFFIX}.${SECOND_LEVEL_DOMAIN}
                - name: PORT # The port that the API will run on (used by fastapi docker image)
                  value: "8080"
                - name: WORKERS_PER_CORE # The number of worker per code (used by fastapi docker image)
                  value: ${WORKERS_PER_CORE}
                - name: "TIMEOUT" # https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker#timeout
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.gunicorn.timeout
                - name: USE_WFWX
                  value: ${USE_WFWX}
                - name: WFWX_MAX_PAGE_SIZE
                  value: ${WFWX_MAX_PAGE_SIZE}
                - name: WFWX_AUTH_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.wfwx-auth-url
                - name: WFWX_BASE_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.wfwx-base-url
                - name: WFWX_USER
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.wfwx-user
                - name: WFWX_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: wfwx-secret
                - name: KEYCLOAK_PUBLIC_KEY
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.keycloak-public-key
                - name: POSTGRES_READ_USER
                  value: ${POSTGRES_USER}
                - name: POSTGRES_WRITE_USER
                  value: ${POSTGRES_USER}
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: app-db-password
                - name: POSTGRES_WRITE_HOST
                  value: ${POSTGRES_WRITE_HOST}
                - name: POSTGRES_READ_HOST
                  value: ${POSTGRES_READ_HOST}
                - name: POSTGRES_PORT
                  value: "5432"
                - name: POSTGRES_DATABASE
                  value: ${POSTGRES_DATABASE}
                - name: STATUS_CHECKER_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: status-checker-sa-secret
                - name: OPENSHIFT_BASE_URI
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.openshift-base-uri
                - name: OPENSHIFT_NAMESPACE_API
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.openshift-namespace-api
                - name: PATRONI_CLUSTER_NAME
                  value: patroni-wps-${SUFFIX}
                - name: PROJECT_NAMESPACE
                  value: ${PROJECT_NAMESPACE}
                - name: ROCKET_URL_POST_MESSAGE
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: rocket.chat-url-post-message
                - name: ROCKET_CHANNEL
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: rocket.chat-channel
                - name: ROCKET_USER_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: rocket.chat-user-id-secret
                - name: ROCKET_AUTH_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: rocket.chat-auth-token-secret
                - name: REACT_APP_KEYCLOAK_AUTH_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.keycloak-auth-url
                - name: REACT_APP_KEYCLOAK_REALM
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.keycloak-realm
                - name: REACT_APP_KEYCLOAK_CLIENT
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.keycloak-client
                - name: REACT_APP_MATOMO_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.matomo-url
                - name: REACT_APP_MATOMO_SITE_ID
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.matomo-site-id
                - name: REACT_APP_MATOMO_CONTAINER
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.matomo-container
                - name: OBJECT_STORE_SERVER
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: object-store-server
                - name: OBJECT_STORE_USER_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: object-store-user-id
                - name: OBJECT_STORE_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: object-store-secret
                - name: OBJECT_STORE_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: ${GLOBAL_NAME}
                      key: object-store-bucket
                - name: REDIS_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-host
                - name: REDIS_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-port
                - name: REDIS_USE
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-use
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: wps-redis
                      key: database-password
                - name: REDIS_STATION_CACHE_EXPIRY
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-station-cache-expiry
                - name: REDIS_HOURLIES_BY_STATION_CODE_CACHE_EXPIRY
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-hourlies-by-station-code-cache-expiry
                - name: REDIS_AUTH_CACHE_EXPIRY
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-auth-cache-expiry
                - name: REDIS_DAILIES_BY_STATION_CODE_CACHE_EXPIRY
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-dailies-by-station-code-expiry
                - name: REDIS_CACHE_ENV_CANADA
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-cache-env-canada
                - name: REDIS_ENV_CANADA_CACHE_EXPIRY
                  valueFrom:
                    configMapKeyRef:
                      name: ${GLOBAL_NAME}
                      key: env.redis-env-canada-cache-expiry
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                httpGet:
                  path: /api/ready
                  port: 8080
                  scheme: HTTP
                # first probe will fire some time between:
                # initialDelaySeconds and initialDelaySeconds + periodSeconds
                initialDelaySeconds: 30
                periodSeconds: 120
                timeoutSeconds: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /api/health
                  port: 8080
                  scheme: HTTP
                # first probe will fire some time between:
                # initialDelaySeconds and initialDelaySeconds + periodSeconds
                initialDelaySeconds: 30
                periodSeconds: 120
                timeoutSeconds: 20
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 80
          targetPort: 8080
      selector:
        name: ${NAME}-${SUFFIX}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}
      annotations:
        # Enable HTTP Strict Transport Security:
        haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
        # Use roundrobin load balancing strategy
        haproxy.router.openshift.io/balance: roundrobin
        haproxy.router.openshift.io/disable_cookies: "true"
    spec:
      host: ${NAME}-${SUFFIX}${ENVIRONMENT}.${SECOND_LEVEL_DOMAIN}
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: ${NAME}-${SUFFIX}
      tls:
        termination: edge
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
        certbot-managed: "true"
      name: ${NAME}-${SUFFIX}-vanity
      annotations:
        # Enable HTTP Strict Transport Security:
        haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
        # Use roundrobin load balancing strategy
        haproxy.router.openshift.io/balance: roundrobin
        haproxy.router.openshift.io/disable_cookies: "true"
    spec:
      host: ${VANITY_DOMAIN}
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: ${NAME}-${SUFFIX}
      tls:
        termination: edge
