apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${APP_NAME}-${SUFFIX}
  annotations:
    "openshift.io/display-name": ${APP_NAME}-${SUFFIX}
labels:
  app.kubernetes.io/part-of: "${APP_NAME}"
  app: ${APP_NAME}-${SUFFIX}
parameters:
  - name: APP_NAME
    description: Application name (wps - wildfire predictive services)
    value: wps-tileserv
    required: true
  - name: SUFFIX
    description: Deployment suffix, e.g. pr-###
    required: true
  - name: NGINX_CONFIG
    description: Nginx config to be used
    value: |
      worker_processes auto;
      error_log /var/log/nginx/error.log;
      pid /var/run/nginx.pid;

      # Load dynamic modules. See /opt/rh/rh-nginx112/root/usr/share/doc/README.dynamic.
      include /usr/share/nginx/modules/*.conf;

      events {
          worker_connections  1024;
      }

      http {
          log_format main '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

          access_log  /var/log/nginx/access.log  main;

          sendfile        on;
          tcp_nopush      on;
          tcp_nodelay     on;
          keepalive_timeout  65;
          types_hash_max_size 2048;


          # Enable Gzip compressed.
          gzip on;

          # Serve pre-compressed files
          gzip_static on;

          # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
          gzip_http_version  1.0;

          # Compression level (1-9).
          # 5 is a perfect compromise between size and cpu usage, offering about
          # 75% reduction for most ascii files (almost identical to level 9).
          gzip_comp_level    5;

          # Don't compress anything that's already small and unlikely to shrink much
          # if at all (the default is 20 bytes, which is bad as that usually leads to
          # larger files after gzipping).
          gzip_min_length    256;

          # Compress data even for clients that are connecting to us via proxies,
          # identified by the "Via" header (required for CloudFront).
          gzip_proxied       any;

          # Tell proxies to cache both the gzipped and regular version of a resource
          # whenever the client's Accept-Encoding capabilities header varies;
          # Avoids the issue where a non-gzip capable client (which is extremely rare
          # today) would display gibberish if their proxy gave them the gzipped version.
          gzip_vary          on;

          # This assigns the number and the size of the compression buffers.
          # The default is gzip_buffers 4 4k;
          # Increase this value to make sure that big Javascript or
          # CSS files can be compressed as well.
          gzip_buffers 16 8k;

          # Compress all output labeled with one of the following MIME-types.
          gzip_types
            application/atom+xml
            application/javascript
            application/x-javascript
            text/xml
            application/xml+rss
            text/javascript
            application/json
            application/rss+xml
            application/vnd.ms-fontobject
            application/x-font-ttf
            application/x-web-app-manifest+json
            application/xhtml+xml
            application/xml
            application/vnd.mapbox-vector-tile
            font/opentype
            image/svg+xml
            image/x-icon
            text/css
            text/plain
            text/x-component;
          # text/html is always compressed by HttpGzipModule

          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          # Load modular configuration files from the /etc/nginx/conf.d directory.
          # See http://nginx.org/en/docs/ngx_core_module.html#include
          # for more information.
          include /etc/nginx.d/*.conf;


          proxy_cache_path /tmp/cache levels=1:2 keys_zone=tile_cache:10m max_size=1g 
                          inactive=15m use_temp_path=off;

          server {
              listen       8080 default_server;
              listen       [::]:8080 default_server;
              server_name  _;
              root   /usr/share/nginx/html;

              # Load configuration files for the default server block.
              include      /etc/nginx.default.d/*.conf;

              location / {
                  proxy_pass http://localhost:7800/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;

                  proxy_cache tile_cache;
                  proxy_cache_valid 200 15d;
                  proxy_cache_valid 500 0s;
                  proxy_cache_min_uses 2;
                  proxy_cache_use_stale error timeout updating http_500 http_502
                                    http_503 http_504;
                  proxy_cache_lock on;
                  add_header X-Cache-Status $upstream_cache_status;
              }


              location /health {
                  access_log off;
                  return 200 "healthy\n";
              }

              # Media: images, icons, video, audio, HTC
              location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
                expires 1M;
                access_log off;
                add_header Cache-Control "public";
              }

              # Javascript and CSS files
              location ~* \.(?:css|js)$ {
                  try_files $uri =404;
                  expires 1y;
                  access_log off;
                  add_header Cache-Control "public";
              }
          }
      }
objects:
  - apiVersion: postgres-operator.crunchydata.com/v1beta1
    kind: PostgresCluster
    metadata:
      name: ${APP_NAME}-${SUFFIX}
      labels:
        app: ${APP_NAME}-${SUFFIX}
    spec:
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi8-14.5-3.2-1
      metadata:
        name: ${APP_NAME}-${SUFFIX}-pgimage
        labels:
          app: ${APP_NAME}-${SUFFIX}-pgimage
      postgresVersion: 14
      instances:
        - name: ${APP_NAME}-${SUFFIX}-primary
          dataVolumeClaimSpec:
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: 1Gi
            storageClassName: netapp-block-standard
          walVolumeClaimSpec:
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: 1Gi
            storageClassName: netapp-block-standard
      backups:
        pgbackrest:
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi8-2.40-1
          repos:
            - name: repo1
              volume:
                volumeClaimSpec:
                  accessModes:
                    - "ReadWriteOnce"
                  resources:
                    requests:
                      storage: 1Gi
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APP_NAME}-${SUFFIX}
      name: ${APP_NAME}-${SUFFIX}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}-${SUFFIX}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}-${SUFFIX}
            name: ${APP_NAME}-${SUFFIX}
        spec:
          volumes:
            - name: nginx-conf-volume
              configMap:
                name: ${APP_NAME}-nginx-config
          containers:
            - name: ${APP_NAME}-${SUFFIX}-nginx-tileserv
              image: artifacts.developer.gov.bc.ca/docker-remote/nginxinc/nginx-unprivileged
              imagePullPolicy: Always
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                httpGet:
                  path: /health
                  port: 8080
                timeoutSeconds: 1
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                httpGet:
                  path: /health
                  port: 8080
                timeoutSeconds: 1
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 200m
                  memory: 256Mi
              volumeMounts:
                - name: nginx-conf-volume
                  mountPath: /etc/nginx/nginx.conf
                  subPath: nginx.conf
                  readOnly: true
            - name: pgtileserv-test
              image: artifacts.developer.gov.bc.ca/docker-remote/pramsey/pg_tileserv:latest
              ports:
                - containerPort: 7800
                  protocol: TCP
              env:
                - name: POSTGRES_URI
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${SUFFIX}-pguser-${APP_NAME}-${SUFFIX}
                      key: uri
                - name: DATABASE_URL
                  value: $(POSTGRES_URI)
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 30
                successThreshold: 1
                tcpSocket:
                  port: 7800
                timeoutSeconds: 5
              readinessProbe:
                httpGet:
                  path: /
                  port: 7800
                failureThreshold: 3
                initialDelaySeconds: 10
                periodSeconds: 30
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 200m
                  memory: 512Mi
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${APP_NAME}-nginx-config
    data:
      nginx.conf: ${NGINX_CONFIG}
