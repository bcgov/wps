---
kind: "Template"
apiVersion: "template.openshift.io/v1"
metadata:
  name: "${JOB_NAME}-cronjob-template"
  annotations:
    description: "Scheduled Task to perform a Database Backup to S3 object store."
    tags: "cronjob,backup"
parameters:
  - name: "JOB_NAME"
    displayName: "Job Name"
    description: "Name of the Scheduled Job to Create."
    value: "backup-postgres"
    required: true
  - name: "SCHEDULE"
    displayName: "Cron Schedule"
    description: "Cron Schedule to Execute the Job (using local cluster system TZ)"
    value: "0 3,9,14,20 * * *"
    required: true
  - name: "SOURCE_IMAGE_NAME"
    displayName: "Source Image Name"
    description: "The name of the image to use for this resource."
    required: true
    value: "s3-backup"
  - name: "IMAGE_NAMESPACE"
    displayName: "Image Namespace"
    description: "The namespace of the OpenShift project containing the imagestream for the application."
    required: true
    value: "e1e498-tools"
  - name: "TAG_NAME"
    displayName: "Environment TAG name"
    description: "The TAG name for this environment, e.g., dev, test, prod"
    required: true
    value: "dev"
  - name: "DATABASE_SERVICE_NAME"
    displayName: "Database Service Name"
    description: "The name of the database service."
    required: true
  - name: DATABASE_USER
    value: wps
    required: true
  - name: "DATABASE_DEPLOYMENT_NAME"
    displayName: "Database Deployment Name"
    description: "The name associated to the database deployment resources.  In particular, this is used to wire up the credentials associated to the database."
    required: true
  - name: DATABASE_PASSWORD_KEY_NAME
    displayName: Database Password Key Name
    description:
      The database password key name stored in database deployment resources
      specified by DATABASE_DEPLOYMENT_NAME.
    required: true
    value: app-db-password
  - name: "PG_PORT"
    displayName: "Postgres port"
    required: true
    value: "5432"
  - name: "PG_DATABASE"
    displayName: "Database name"
    required: true
    value: "wps"
  - name: "BACKUP_STRATEGY"
    displayName: "Backup Strategy"
    description: "The strategy to use for backups; for example daily, or rolling."
    required: true
    value: "rolling"
  - name: "BUCKET"
    displayName: "The root backup directory"
    description: "The name of the root backup directory"
    required: true
    value: "/backups/"
  - name: "APP_LABEL"
    required: true
  - name: CPU_REQUEST
    value: "0.5"
  - name: CPU_LIMIT
    value: "1"
  - name: "JOB_BACKOFF_LIMIT"
    displayName: "Job Backoff Limit"
    description: "The number of attempts to try for a successful job outcome"
    value: "0"
    required: false
  - name: "SUCCESS_JOBS_HISTORY_LIMIT"
    displayName: "Successful Job History Limit"
    description: "The number of successful jobs that will be retained"
    value: "5"
    required: true
  - name: "FAILED_JOBS_HISTORY_LIMIT"
    displayName: "Failed Job History Limit"
    description: "The number of failed jobs that will be retained"
    value: "2"
    required: true
  - name: "JOB_SERVICE_ACCOUNT"
    displayName: "Service Account Name"
    description: "Name of the Service Account To Exeucte the Job As."
    value: "default"
    required: true
  - name: GLOBAL_NAME
    description: Name of global Module
    value: wps-global
  - name: CLUSTER_NAME
    description: |
      The name of the patroni cluster to connect to.
    displayName: Server Name
    required: true
objects:
  - kind: "CronJob"
    apiVersion: "batch/v1"
    metadata:
      name: "${JOB_NAME}"
      labels:
        app: ${APP_LABEL}
        template: "${JOB_NAME}-cronjob"
        cronjob: "${JOB_NAME}"
    spec:
      schedule: "${SCHEDULE}"
      concurrencyPolicy: "Forbid"
      successfulJobsHistoryLimit: "${{SUCCESS_JOBS_HISTORY_LIMIT}}"
      failedJobsHistoryLimit: "${{FAILED_JOBS_HISTORY_LIMIT}}"
      jobTemplate:
        metadata:
          labels:
            template: "${JOB_NAME}-job"
            cronjob: "${JOB_NAME}"
        spec:
          backoffLimit: ${{JOB_BACKOFF_LIMIT}}
          template:
            spec:
              containers:
                - name: "${JOB_NAME}-cronjob"
                  imagePullPolicy: Always
                  resources:
                    limits:
                      cpu: ${CPU_LIMIT}
                      memory: 4Gi
                    requests:
                      cpu: ${CPU_REQUEST}
                      memory: 2Gi
                  image: "image-registry.openshift-image-registry.svc:5000/${IMAGE_NAMESPACE}/${SOURCE_IMAGE_NAME}:${TAG_NAME}"
                  # image: backup
                  env:
                    - name: PG_HOSTNAME
                      value: ${CLUSTER_NAME}-leader
                    - name: PG_PORT
                      value: ${PG_PORT}
                    - name: PG_DATABASE
                      value: ${PG_DATABASE}
                    - name: PG_USER
                      value: ${DATABASE_USER}
                    - name: PG_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: "${DATABASE_DEPLOYMENT_NAME}"
                          key: "${DATABASE_PASSWORD_KEY_NAME}"
                    - name: AWS_HOSTNAME
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-server
                    - name: AWS_ACCESS_KEY
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-user-id
                    - name: AWS_SECRET_KEY
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-secret
                    - name: AWS_BUCKET
                      valueFrom:
                        secretKeyRef:
                          name: ${GLOBAL_NAME}
                          key: object-store-bucket
                    - name: POSTGRESQL_USER
                      value: ${DATABASE_USER}
                    - name: POSTGRESQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: "${DATABASE_DEPLOYMENT_NAME}"
                          key: "${DATABASE_PASSWORD_KEY_NAME}"
                    - name: POSTGRESQL_DATABASE
                      value: ${PG_DATABASE}
              restartPolicy: "Never"
              terminationGracePeriodSeconds: 30
              activeDeadlineSeconds: 1600
              dnsPolicy: "ClusterFirst"
              serviceAccountName: "${JOB_SERVICE_ACCOUNT}"
              serviceAccount: "${JOB_SERVICE_ACCOUNT}"
