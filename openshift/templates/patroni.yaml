apiVersion: v1
kind: Template
metadata:
  name: patroni-pgsql-persistent
  annotations:
    description: |-
      Patroni Postgresql database cluster, with persistent storage.
    iconClass: icon-postgresql
    openshift.io/display-name: Patroni Postgresql (Persistent)
    openshift.io/long-description: This template deploys a a patroni postgresql HA cluster with persistent storage.
    tags: postgresql
labels:
  app.kubernetes.io/part-of: "${NAME}"
  app: ${NAME}-${SUFFIX}
  instance: ${NAME}-${SUFFIX}
  component: database
  version: "${IMAGE_VERSION}"
objects:
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        application: ${APPLICATION_NAME}
        cluster-name: ${PATRONI_CLUSTER_NAME}
      name: ${PATRONI_CLUSTER_NAME}
    spec:
      ports:
        - port: 5432
          protocol: TCP
          targetPort: 5432
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        application: ${APPLICATION_NAME}
        cluster-name: ${PATRONI_CLUSTER_NAME}
      name: ${PATRONI_LEADER_SERVICE_NAME}
    spec:
      ports:
        - port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        application: ${APPLICATION_NAME}
        cluster-name: ${PATRONI_CLUSTER_NAME}
        role: master
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        application: ${APPLICATION_NAME}
        cluster-name: ${PATRONI_CLUSTER_NAME}
      name: ${PATRONI_REPLICA_SERVICE_NAME}
    spec:
      ports:
        - port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        application: ${APPLICATION_NAME}
        cluster-name: ${PATRONI_CLUSTER_NAME}
        role: replica
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      creationTimestamp: null
      generation: 3
      labels:
        application: ${APPLICATION_NAME}
        cluster-name: ${PATRONI_CLUSTER_NAME}
      name: ${APPLICATION_NAME}
    spec:
      podManagementPolicy: ${POD_MANAGEMENT_POLICY}
      replicas: 3
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          application: ${APPLICATION_NAME}
          cluster-name: ${PATRONI_CLUSTER_NAME}
          statefulset: ${APPLICATION_NAME}
      serviceName: ${APPLICATION_NAME}
      template:
        metadata:
          creationTimestamp: null
          labels:
            application: ${APPLICATION_NAME}
            cluster-name: ${PATRONI_CLUSTER_NAME}
            statefulset: ${APPLICATION_NAME}
        spec:
          containers:
            - env:
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: status.podIP
                - name: PATRONI_KUBERNETES_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: PATRONI_KUBERNETES_LABELS
                  value: "{application: ${APPLICATION_NAME}, cluster-name: ${PATRONI_CLUSTER_NAME}}"
                - name: PATRONI_SUPERUSER_USERNAME
                  value: ${PATRONI_SUPERUSER_USERNAME}
                - name: PATRONI_SUPERUSER_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-global
                      key: patroni-superuser-password
                - name: PATRONI_REPLICATION_USERNAME
                  value: ${PATRONI_REPLICATION_USERNAME}
                - name: PATRONI_REPLICATION_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-global
                      key: patroni-replication-password
                - name: PATRONI_SCOPE
                  value: ${PATRONI_CLUSTER_NAME}
                - name: PATRONI_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: PATRONI_LOG_LEVEL
                  value: DEBUG
                - name: APP_USER
                  value: ${NAME}-${SUFFIX}
                - name: APP_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-global
                      key: app-db-password
                - name: APP_DATABASE
                  value: ${NAME}-${SUFFIX}
                - name: PATRONI_POSTGRESQL_DATA_DIR
                  value: /home/postgres/pgdata/pgroot/data
                - name: PATRONI_POSTGRESQL_PGPASS
                  value: /tmp/pgpass
                - name: PATRONI_POSTGRESQL_LISTEN
                  value: 0.0.0.0:5432
                - name: PATRONI_RESTAPI_LISTEN
                  value: 0.0.0.0:8008
                - name: ROCKET_AUTH_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-global
                      key: rocket.chat-auth-token-secret
                - name: ROCKET_USER_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-global
                      key: rocket.chat-user-id-secret
                - name: ROCKET_CHANNEL
                  value: ${ROCKET_CHANNEL}
                - name: DISK_SPACE_WARNING_LIMIT
                  value: ${DISK_SPACE_WARNING_LIMIT}
                - name: ROCKET_URI
                  value: ${ROCKET_URI}
              image: ${IMAGE_SERVER}/${IMAGE_NAMESPACE}/patroni:${IMAGE_VERSION}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8008
                  protocol: TCP
                - containerPort: 5432
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /home/postgres/pgdata
                  name: ${APPLICATION_NAME}
              livenessProbe:
                exec:
                  command:
                    - /bin/bash
                    - "-c"
                    - /usr/share/scripts/patroni/disk_space_check.sh
                  initialDelaySeconds: 60
                  periodSeconds: 3600
              readinessProbe:
                successThreshold: 1
                failureThreshold: 3
                exec:
                  command:
                    - /bin/bash
                    - "-c"
                    - /usr/share/scripts/patroni/health_check.sh
                initialDelaySeconds: 10
                periodSeconds: 60
                timeoutSeconds: 10
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: ${SERVICE_ACCOUNT}
          serviceAccountName: ${SERVICE_ACCOUNT}
          terminationGracePeriodSeconds: 0
          volumes:
            - name: ${APPLICATION_NAME}
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}
      volumeClaimTemplates:
        - metadata:
            labels:
              application: ${APPLICATION_NAME}
            name: ${APPLICATION_NAME}
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: ${PVC_SIZE}
      updateStrategy:
        type: OnDelete
  - apiVersion: v1
    kind: Endpoints
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        application: ${APPLICATION_NAME}
        cluster-name: ${PATRONI_CLUSTER_NAME}
    subsets: []
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ${SERVICE_ACCOUNT}
      labels:
        application: ${APPLICATION_NAME}
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: ${SERVICE_ACCOUNT}
      labels:
        application: ${APPLICATION_NAME}
    rules:
      - apiGroups:
          - ""
        resources:
          - configmaps
        verbs:
          - create
          - get
          - list
          - patch
          - update
          - watch
          # delete is required only for 'patronictl remove'
          - delete
      - apiGroups:
          - ""
        resources:
          - endpoints
        verbs:
          - get
          - patch
          - update
          # the following three privileges are necessary only when using endpoints
          - create
          - list
          - watch
          # delete is required only for for 'patronictl remove'
          - delete
      - apiGroups:
          - ""
        resources:
          - pods
        verbs:
          - get
          - list
          - patch
          - update
          - watch
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: ${SERVICE_ACCOUNT}
      labels:
        application: ${APPLICATION_NAME}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: ${SERVICE_ACCOUNT}
    subjects:
      - kind: ServiceAccount
        name: ${SERVICE_ACCOUNT}
  - apiVersion: security.devops.gov.bc.ca/v1alpha1
    kind: NetworkSecurityPolicy
    metadata:
      name: patroni-db-to-db-${NAME}-${SUFFIX}
      labels:
        app: ${NAME}-${SUFFIX}
    spec:
      description: |
        allow patroni pods to talk to one another for replication etc.
      source:
        - - "$namespace=${TARGET_NAMESPACE}"
          - "statefulset=${APPLICATION_NAME}"
      destination:
        - - "$namespace=${TARGET_NAMESPACE}"
          - "statefulset=${APPLICATION_NAME}"
parameters:
  - name: NAME
    description: Module name
    value: wps
  - name: SUFFIX
    description: Deployment suffix, e.g. pr-###
    required: true
  - description: The name of the application for labelling all artifacts.
    displayName: Application Name
    name: APPLICATION_NAME
    value: patroni-persistent
  - description: The name of the patroni-pgsql cluster.
    displayName: Cluster Name
    name: PATRONI_CLUSTER_NAME
    value: patroni-persistent
  - description: The name of the OpenShift Service exposed for the patroni-persistent-leader container.
    displayName: Leader service name.
    name: PATRONI_LEADER_SERVICE_NAME
    value: patroni-persistent-leader
  - description: The name of the OpenShift Service exposed for the patroni-persistent-replica containers.
    displayName: Replica service name.
    name: PATRONI_REPLICA_SERVICE_NAME
    value: patroni-persistent-replica
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
  - description: Maximum amount of cpu the container can use.
    displayName: CPU Limit
    name: CPU_LIMIT
    value: 250m
  - description: Maximum amount of memory the container can request.
    displayName: Memory Request
    name: MEMORY_REQUEST
    value: 256Mi
  - description: Maximum amount of cpu the container can request.
    displayName: CPU Request
    name: CPU_REQUEST
    value: 50m
  - description: The server URI where images can be found
    displayName: Image server URI
    name: IMAGE_SERVER
    value: docker-registry.default.svc:5000
    required: true
  - description: The OpenShift Namespace where the patroni and postgresql ImageStream resides.
    displayName: ImageStream Namespace
    name: IMAGE_NAMESPACE
    required: true
  - description: Namespace into which database resides
    displayName: Target Namespace
    name: TARGET_NAMESPACE
    required: true
  - description: Username of the superuser account for initialization.
    displayName: Superuser Username
    name: PATRONI_SUPERUSER_USERNAME
    value: postgres
  - description: Username of the replication account for initialization.
    displayName: Replication Username
    name: PATRONI_REPLICATION_USERNAME
    value: replication
  - description: Service account name used for pods and rolebindings to form a cluster in the project.
    displayName: Service Account
    name: SERVICE_ACCOUNT
    value: patroniocp
  - description: The size of the persistent volume to create.
    displayName: Persistent Volume Size
    name: PVC_SIZE
    value: 5Gi
  - description: Version of Patroni image to be used.
    displayName: Patroni image version
    name: IMAGE_VERSION
    value: "v10"
  - description: Pod management policy. For faster startups, use Parallel.
    displayName: Pod management policy.
    name: POD_MANAGEMENT_POLICY
    value: "Parallel"
  - description: Rocket.Chat channel to use for notifications.
    displayName: Rocket.Chat channel
    name: ROCKET_CHANNEL
    value: "#predictiveservicesteam-dev"
  - description: Rocket.Chat URI
    displayName: Rocket.CHat URI
    name: ROCKET_URI
    value: "https://chat.developer.gov.bc.ca/api/v1/chat.postMessage"
  - description: Amount of space (in kilobytes) at which to start sending notifications.
    displayName: Disk space warning limit.
    name: DISK_SPACE_WARNING_LIMIT
    value: "2097152"
