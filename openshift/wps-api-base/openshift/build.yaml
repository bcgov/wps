apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: wps-api-base
labels:
  app: ${NAME}${SUFFIX}
  phase: build
  app.kubernetes.io/name: wps-api-base
  app.kubernetes.io/managed-by: template
  app.kubernetes.io/version: "ubuntu.24.04"
parameters:
  - name: NAME
    value: wps-api-base
  - name: SUFFIX
  - name: VERSION
    description: Output version
    required: true
  - name: GIT_URL
    value: https://github.com/bcgov/wps.git
  - name: GIT_BRANCH
    value: task/bump-base-image-deps
objects:
  #ImageStream is created if it doesn't already exist
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      labels:
        app: wps-api-base
        common: "true"
      name: wps-api-base
    spec:
      lookupPolicy:
        local: false
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      labels:
        app: wps-api-base
      name: wps-api-base
    spec:
      completionDeadlineSeconds: 3600 # 60 minutes
      resources:
        limits:
          memory: 10Gi
          cpu: 4000m
        requests:
          memory: 5Gi
          cpu: 500m
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}${SUFFIX}:${VERSION}
      source:
        dockerfile: |
          ARG DOCKER_IMAGE=artifacts.developer.gov.bc.ca/docker-remote/ubuntu:24.04
          # For the final stage, we use ubuntu:24.04
          # Rationale for using ubuntu:24.04:
          # - It's the latest ubuntu LTS release.
          # - It generally has a more recent version of gdal than debian.
          # - It generally has a fairly recent version of python.
          # - It has a more recent version of wkhtmltopdf and supporting libraries than debian.
          #
          # When building local, you can pull direct from docker, instead of artifacts.developer.gov.bc.ca:
          # docker build --build-arg DOCKER_IMAGE=ubuntu:24.04 . --tag=wps-api-base:ubuntu.24.04-latest
          FROM ${DOCKER_IMAGE}

          # We don't want to run our app as root, so we define a worker user.
          ARG USERNAME=worker
          ARG USER_UID=1010
          ARG USER_GID=1000


          # Create our worker user
          RUN groupadd --gid $USER_GID $USERNAME || true && \
              useradd --uid $USER_UID --gid $USER_GID -m $USERNAME

          # When our app is running, we want to allow poetry full access to the workers home directory.
          # +x : to execute the poetry binary
          # +r : to read poetry cache
          RUN chmod a+rx /home/$USERNAME

      strategy:
        type: Docker
