"""Add planning area ready state

Revision ID: d4fa3ec5183f
Revises: 16386a52d7bf
Create Date: 2022-05-16 11:21:16.354344

"""
from typing import List, Optional
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session


# revision identifiers, used by Alembic.
revision = 'd4fa3ec5183f'
down_revision = '16386a52d7bf'
branch_labels = None
depends_on = None

hfi_request_table = sa.Table('hfi_request', sa.MetaData(),
                             sa.Column('id', sa.Integer),
                             sa.Column('fire_centre_id', sa.Integer),
                             sa.Column('prep_start_day', sa.Date),
                             sa.Column('prep_end_day', sa.Date),
                             sa.Column('create_timestamp', sa.TIMESTAMP(timezone=True)),
                             sa.Column('create_user', sa.String()),
                             sa.Column('request', sa.JSON()))

fire_centres_table = sa.Table('fire_centres', sa.MetaData(),
                              sa.Column('id', sa.Integer),
                              sa.Column('name', sa.String))

planning_areas_table = sa.Table('planning_areas', sa.MetaData(),
                                sa.Column('id', sa.Integer),
                                sa.Column('name', sa.String),
                                sa.Column('fire_centre_id', sa.Integer),
                                sa.Column('order_of_appearance_in_list', sa.Integer))


def get_unique_request_fire_centre_ids(session: Session) -> List[int]:
    res = session.query(hfi_request_table.c.fire_centre_id).all()
    ids = list(set([row[0] for row in res]))
    return ids


def get_unique_planning_area_ids(session: Session, fc_id: int):
    res = session.query(planning_areas_table.c.id) \
        .filter(planning_areas_table.c.fire_centre_id == fc_id)
    ids = [row[0] for row in res]
    return ids


def build_ready_state(pa_ids: List[int]):
    ready_state: dict[int, bool] = {"ready": {key: False for key in pa_ids}}
    print(ready_state)
    return ready_state


def merge_request_with_ready_state(session: Session, fc_id: int, ready_state: dict[int, bool]):
    print("Merging for fc id: %s", fc_id)
    res = session.query(hfi_request_table) \
        .filter(hfi_request_table.c.fire_centre_id == fc_id)

    for hfi_request in res:
        print(hfi_request)


def upgrade():
    # ### commands auto generated by Alembic ###
    session = Session(bind=op.get_bind())
    fc_ids = get_unique_request_fire_centre_ids(session)
    print(fc_ids)
    for fc_id in fc_ids:
        pa_ids = get_unique_planning_area_ids(session, fc_id)
        pa_ready_state = build_ready_state(pa_ids)
        merge_request_with_ready_state(session, fc_id, pa_ready_state)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
