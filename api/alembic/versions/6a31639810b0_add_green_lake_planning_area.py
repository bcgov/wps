"""add green lake planning area

Revision ID: 6a31639810b0
Revises: cacd97331dcb
Create Date: 2025-04-03 14:24:16.331359

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm.session import Session

from wps_shared.db.models.common import TZTimeStamp
from wps_shared.utils.time import get_utc_now

# revision identifiers, used by Alembic.
revision = "6a31639810b0"
down_revision = "cacd97331dcb"
branch_labels = None
depends_on = None

planning_areas_table = sa.Table(
    "planning_areas",
    sa.MetaData(),
    sa.Column("id", sa.Integer),
    sa.Column("name", sa.String),
    sa.Column("fire_centre_id", sa.Integer),
    sa.Column("order_of_appearance_in_list", sa.Integer),
)


planning_weather_stations_table = sa.Table(
    "planning_weather_stations",
    sa.MetaData(),
    sa.Column("id", sa.Integer),
    sa.Column("fuel_type_id", sa.Integer),
    sa.Column("planning_area_id", sa.Integer),
    sa.Column("station_code", sa.Integer),
    sa.Column("order_of_appearance_in_planning_area_list", sa.Integer),
    sa.Column("create_user", sa.String),
    sa.Column("create_timestamp", TZTimeStamp()),
    sa.Column("update_user", sa.String),
    sa.Column("update_timestamp", TZTimeStamp()),
    sa.Column("is_deleted", sa.Boolean),
)

fire_centres_table = sa.Table(
    "fire_centres", sa.MetaData(), sa.Column("id", sa.Integer), sa.Column("name", sa.String)
)

fuel_types_table = sa.Table(
    "fuel_types",
    sa.MetaData(),
    sa.Column("id", sa.Integer),
    sa.Column("abbrev", sa.String),
    sa.Column("fuel_type_code", sa.String),
    sa.Column("description", sa.String),
    sa.Column("percentage_conifer", sa.Integer),
    sa.Column("percentage_dead_fir", sa.Integer),
)


def get_planning_area_id(session: Session, planning_area_name: str):
    res = session.query(planning_areas_table).filter(
        planning_areas_table.c.name.ilike(f"{planning_area_name}%")
    )
    return int(res.first().id)


def get_fire_centre_id(session: Session, fire_centre_name: str):
    res = session.query(fire_centres_table).filter(
        fire_centres_table.c.name.ilike(f"%{fire_centre_name}%")
    )
    return int(res.first().id)


def get_fuel_type_id(session: Session, fuel_type_abbrev: str):
    res = session.query(fuel_types_table).filter(
        fuel_types_table.c.abbrev.ilike(f"{fuel_type_abbrev}%%")
    )
    return int(res.first().id)


def get_station_fuel_type(session: Session, station_code: str):
    res = session.query(planning_weather_stations_table).filter(
        planning_weather_stations_table.c.station_code == station_code
    )
    return int(res.first().fuel_type_id)


def insert_green_lake_station(
    session: Session,
    fuel_type_id: int,
    planning_area_id: int,
    station_code: int,
    order_of_appearance_in_planning_area_list: int,
):
    timestamp = get_utc_now()
    insert_station_stmt = planning_weather_stations_table.insert().values(
        {
            "fuel_type_id": fuel_type_id,
            "planning_area_id": planning_area_id,
            "station_code": station_code,
            "order_of_appearance_in_planning_area_list": order_of_appearance_in_planning_area_list,
            "is_deleted": False,
            "create_user": "system",
            "create_timestamp": timestamp,
            "update_user": "system",
            "update_timestamp": timestamp,
        }
    )
    session.execute(insert_station_stmt)


wet_belt_name = "Wet Belt"
green_lake_name = "Green Lake"
green_lake_station_codes = [236, 218, 235, 212, 832, 306]


def upgrade():
    # ### commands auto generated by Alembic ###
    session = Session(bind=op.get_bind())
    wet_belt_id = get_planning_area_id(session, wet_belt_name)

    wet_belt_update_order_stmt = (
        planning_areas_table.update()
        .where(planning_areas_table.c.id == wet_belt_id)
        .values(
            {
                "order_of_appearance_in_list": 5,
            }
        )
    )

    session.execute(wet_belt_update_order_stmt)
    session.commit()

    cafc_id = get_fire_centre_id(session, "Cariboo Fire Centre")

    green_lake_insert_stmt = (
        planning_areas_table.insert()
        .values(
            {"name": green_lake_name, "fire_centre_id": cafc_id, "order_of_appearance_in_list": 4}
        )
        .returning(planning_areas_table.c.id)
    )
    res = session.execute(green_lake_insert_stmt)
    green_lake_id = res.fetchone().id

    for index, station_code in enumerate(green_lake_station_codes):
        fuel_type_id = get_station_fuel_type(session, station_code)
        insert_green_lake_station(session, fuel_type_id, green_lake_id, station_code, index + 1)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic ###
    session = Session(bind=op.get_bind())

    green_lake_id = get_planning_area_id(session, green_lake_name)
    delete_stations_stmt = planning_weather_stations_table.delete().where(
        planning_weather_stations_table.c.planning_area_id == green_lake_id
    )
    session.execute(delete_stations_stmt)
    session.commit()
    delete_green_lake_stmt = planning_areas_table.delete().where(
        planning_areas_table.c.id == green_lake_id
    )
    session.execute(delete_green_lake_stmt)
    session.commit()

    wet_belt_id = get_planning_area_id(session, wet_belt_name)

    wet_belt_update_order_stmt = (
        planning_areas_table.update()
        .where(planning_areas_table.c.id == wet_belt_id)
        .values(
            {
                "order_of_appearance_in_list": 5,
            }
        )
    )

    session.execute(wet_belt_update_order_stmt)
    session.commit()
    # ### end Alembic commands ###
