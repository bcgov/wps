"""Add planning area ready state

Revision ID: aa41e2b0e9ee
Revises: ac65354014bd
Create Date: 2022-05-16 13:36:46.208331

"""
import json
from typing import Dict, List
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session
from app.db.models.hfi_calc import HFIRequest

from app.schemas.hfi_calc import HFIResultRequest
from app.utils.time import get_utc_now


# revision identifiers, used by Alembic.
revision = 'aa41e2b0e9ee'
down_revision = 'ac65354014bd'
branch_labels = None
depends_on = None


hfi_request_table = sa.Table('hfi_request', sa.MetaData(),
                             sa.Column('id', sa.Integer),
                             sa.Column('fire_centre_id', sa.Integer),
                             sa.Column('prep_start_day', sa.Date),
                             sa.Column('prep_end_day', sa.Date),
                             sa.Column('create_timestamp', sa.TIMESTAMP(timezone=True)),
                             sa.Column('create_user', sa.String()),
                             sa.Column('request', sa.JSON()))

fire_centres_table = sa.Table('fire_centres', sa.MetaData(),
                              sa.Column('id', sa.Integer),
                              sa.Column('name', sa.String))

planning_areas_table = sa.Table('planning_areas', sa.MetaData(),
                                sa.Column('id', sa.Integer),
                                sa.Column('name', sa.String),
                                sa.Column('fire_centre_id', sa.Integer),
                                sa.Column('order_of_appearance_in_list', sa.Integer))


def get_unique_request_fire_centre_ids(session: Session) -> List[int]:
    res = session.query(hfi_request_table.c.fire_centre_id).all()
    ids = list(set([row[0] for row in res]))
    return ids


def get_unique_planning_area_ids(session: Session, fc_id: int):
    res = session.query(planning_areas_table.c.id) \
        .filter(planning_areas_table.c.fire_centre_id == fc_id)
    ids = [row[0] for row in res]
    return ids


def build_ready_state(pa_ids: List[int]):
    ready_state: Dict[int, bool] = {key: False for key in pa_ids}
    return ready_state


def merge_request_with_ready_state(session: Session, fc_id: int, ready_state: Dict[int, bool]):
    res = session.query(hfi_request_table)\
        .filter(hfi_request_table.c.fire_centre_id == fc_id)
    for hfi_request in res:
        updated_request = HFIResultRequest.parse_obj(json.loads(hfi_request.request))
        updated_request.planning_area_ready_status = ready_state
        updated_hfi_request = HFIRequest(
            fire_centre_id=hfi_request.fire_centre_id,
            prep_start_day=hfi_request.prep_start_day,
            prep_end_day=hfi_request.prep_end_day,
            create_timestamp=get_utc_now(),
            create_user=hfi_request.create_user,
            request=updated_request.json())
        print(updated_hfi_request.request)
        session.add(updated_hfi_request)


def delete_ready_state_from_request(session: Session):
    res = session.query(hfi_request_table).all()
    for hfi_request in res:
        updated_request = HFIResultRequest.parse_obj(json.loads(hfi_request.request))
        updated_request.planning_area_ready_status = None
        updated_hfi_request = HFIRequest(
            fire_centre_id=hfi_request.fire_centre_id,
            prep_start_day=hfi_request.prep_start_day,
            prep_end_day=hfi_request.prep_end_day,
            create_timestamp=get_utc_now(),
            create_user=hfi_request.create_user,
            request=updated_request.json())
        print(updated_hfi_request.request)
        session.add(updated_hfi_request)


def upgrade():
    # ### commands auto generated by Alembic ###
    session = Session(bind=op.get_bind())
    fc_ids = get_unique_request_fire_centre_ids(session)
    for fc_id in fc_ids:
        pa_ids = get_unique_planning_area_ids(session, fc_id)
        pa_ready_state = build_ready_state(pa_ids)
        merge_request_with_ready_state(session, fc_id, pa_ready_state)
    session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic ###
    session = Session(bind=op.get_bind())
    delete_ready_state_from_request(session)
    session.commit()
    # ### end Alembic commands ###
