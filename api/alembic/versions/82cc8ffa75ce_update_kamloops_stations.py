"""Update Kamloops stations

Revision ID: 82cc8ffa75ce
Revises: c525dbd0c37e
Create Date: 2022-04-14 13:30:21.139779

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session

# revision identifiers, used by Alembic.
revision = '82cc8ffa75ce'
down_revision = 'c525dbd0c37e'
branch_labels = None
depends_on = None

new_station_code = 1227

# Ad-hoc tables to use for adding/updating rows.

planning_weather_stations_table = sa.Table('planning_weather_stations', sa.MetaData(),
                                           sa.Column('id', sa.Integer),
                                           sa.Column('fuel_type_id', sa.Integer),
                                           sa.Column('planning_area_id', sa.Integer),
                                           sa.Column('station_code', sa.Integer),
                                           sa.Column('order_of_appearance_in_planning_area_list', sa.Integer))

planning_areas_table = sa.Table('planning_areas', sa.MetaData(),
                                sa.Column('id', sa.Integer),
                                sa.Column('name', sa.String),
                                sa.Column('fire_centre_id', sa.Integer),
                                sa.Column('order_of_appearance_in_list', sa.Integer))


fuel_types_table = sa.Table('fuel_types', sa.MetaData(),
                            sa.Column('id', sa.Integer),
                            sa.Column('abbrev', sa.String),
                            sa.Column('fuel_type_code', sa.String),
                            sa.Column('description', sa.String),
                            sa.Column('percentage_conifer', sa.Integer),
                            sa.Column('percentage_dead_fir', sa.Integer))

fire_centres_table = sa.Table('fire_centres', sa.MetaData(),
                              sa.Column('id', sa.Integer),
                              sa.Column('name', sa.String))


def get_fuel_type_id(session: Session, fuel_type_abbrev: str):
    res = session.query(fuel_types_table) \
        .filter(fuel_types_table.c.abbrev.ilike(f'{fuel_type_abbrev}%%'))
    return int(res.first().id)


def get_fire_centre_id(session: Session, fire_centre_name: str):
    res = session.query(fire_centres_table).filter(fire_centres_table.c.name.ilike(f'%{fire_centre_name}%'))
    return int(res.first().id)


def get_planning_area_id_for_fire_centre(session: Session, fc_id: int, planning_area_name: str):
    res = session.query(planning_areas_table) \
        .filter(planning_areas_table.c.fire_centre_id ==
                fc_id) \
        .filter(planning_areas_table.c.name.ilike(f'{planning_area_name}%%'))
    return int(res.first().id)


def map_order_update(session: Session, planning_area_id: int, upgrade: bool):
    """ We are either adding or removing 1 station with top sorting order,
        so bump existing station orders up or down by 1
    """
    bump_value = 1
    if(not upgrade):
        bump_value = -bump_value

    op.drop_constraint('unique_order_for_planning_area',
                       'planning_weather_stations', type_='unique')

    update_stmt = planning_weather_stations_table\
        .update()\
        .values(order_of_appearance_in_planning_area_list=planning_weather_stations_table.c.order_of_appearance_in_planning_area_list + bump_value)\
        .where(planning_weather_stations_table.c.planning_area_id ==
               planning_area_id)
    session.execute(update_stmt)

    op.create_unique_constraint('unique_order_for_planning_area', 'planning_weather_stations', [
                                'order_of_appearance_in_planning_area_list', 'planning_area_id'])


def upgrade():
    # ### commands auto generated by Alembic ###
    session = Session(bind=op.get_bind())
    kfc_id = get_fire_centre_id(session, 'Kamloops Fire Centre')
    penticton_id = get_planning_area_id_for_fire_centre(session, kfc_id, 'Penticton')

    # We are adding 1 station with top sorting order, so bump existing station orders up by 1
    map_order_update(session, penticton_id, True)

    # Now add the new station with top order
    c7_id = get_fuel_type_id(session, 'c7')
    op.bulk_insert(planning_weather_stations_table, [{'station_code': new_station_code,
                                                      'fuel_type_id': c7_id,
                                                      'planning_area_id': penticton_id,
                                                      'order_of_appearance_in_planning_area_list': 1}])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic  ###
    session = Session(bind=op.get_bind())
    kfc_id = get_fire_centre_id(session, 'Kamloops Fire Centre')
    penticton_id = get_planning_area_id_for_fire_centre(session, kfc_id, 'Penticton')

    delete_stmt = planning_weather_stations_table\
        .delete()\
        .where(planning_weather_stations_table.c.station_code == new_station_code)
    session.execute(delete_stmt)

    # We are removing 1 station with top sorting order, so bump existing station orders down by 1
    map_order_update(session, penticton_id, False)

    # ### end Alembic commands ###
