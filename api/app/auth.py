""" Authentication module for validating access tokens generated by Keycloak
"""
import logging
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
import jwt
from app import config

logger = logging.getLogger(__name__)

# Parse request header and pass the token
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")


async def authenticate(token: str = Depends(oauth2_scheme)):
    """ Returns True when validation of the token is successful """
    # RSA public key format
    keycloak_public_key = '-----BEGIN PUBLIC KEY-----\n' + \
        config.get('KEYCLOAK_PUBLIC_KEY') + '\n-----END PUBLIC KEY-----'

    try:
        jwt.decode(token, keycloak_public_key, algorithm='RS256')
        return True
    except Exception as exception:
        detail = 'Could not validate the credential ({})'.format(exception)
        logger.error(detail)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=detail,
            headers={'WWW-Authenticate': 'Bearer'},
        ) from exception
