from tempfile import TemporaryDirectory

import numpy as np
from osgeo import gdal

from app.utils.pmtiles import merge_pmtiles, tippecanoe_wrapper, write_geojson
from wps_shared import config
from wps_shared.geospatial.wps_dataset import WPSDataset
from wps_shared.utils.polygonize import polygonize_in_memory
from wps_shared.utils.s3 import set_s3_gdal_config

"""
Simple local script for generating PMTiles files for the fuel grid.
This script can be used to generate both low resolution (2km) and high resolution (500m) fuel grid PMTiles.

The high res fuel grid (Currently 500m) typically will work for zoom levels 7-12.
The low res fuel grid (Currently 2km) is needed for zoom levels 4-6.

The low res PMTiles can be generated by simply running this script without any arguments and setting the
low_res_geotiff and low_res_pmtiles_output variables to the desired input and output paths.

The high res PMTiles can be generated by running this script with the "highres" argument and setting all
variables appropriately. 
"""

bucket = config.get("OBJECT_STORE_BUCKET")


# paths for low resolution fuel grid
low_res_geotiff = f"/vsis3/{bucket}/sfms/static/fbp2025.tif"  # input fuel grid stored in s3
low_res_pmtiles_output = "/output/to/fbp2025.pmtiles"  # local output


# paths for high resolution fuel grid
high_res_geotiff = "/fuel/input/path/FM_FUEL_TYPE_GRID_BC_2025_500m_BC_ONLY.tif"
high_res_pmtiles_output = "/output/to/fbp2025_500m.pmtiles"


def reclassify_fuel_geotiff(fuel_raster_path: str, output_geotiff_path: str) -> str:
    """
    Reclassify the fuel grid raster -- typically needed for high res prometheus fuel grid.
    The reclassification rules are based on the lookup table for the 2025 fuel grid in s3:
    {bucket}/psu/rasters/fuel
    """
    ds = gdal.Open(fuel_raster_path)
    band = ds.GetRasterBand(1)
    array = band.ReadAsArray()
    reclassified = np.copy(array)

    reclassified[np.isin(array, [2010, 2060, 2070])] = 8
    reclassified[array == 2030] = 10
    reclassified[np.isin(array, [2050, 2080])] = 12
    reclassified[(array >= 500) & (array <= 595)] = 14
    reclassified[array == 2020] = 14
    reclassified[np.isin(array, [2000, 2040])] = 99

    transform = ds.GetGeoTransform()
    projection = ds.GetProjection()
    no_data_value = band.GetNoDataValue()
    reclassified[array == no_data_value] = 255
    ds = None

    with WPSDataset.from_array(reclassified, transform, projection, 255, gdal.GDT_Byte) as ds:
        ds.export_to_geotiff(output_geotiff_path)

    print(f"Reclassification complete. Output saved to: {output_geotiff_path}")
    return output_geotiff_path


def generate_fuel_pmtiles(
    fuel_grid_path: str, output_path: str, min_zoom: int = 4, max_zoom: int = 12
):
    """
    Simple function for local use to regenerate fuel grid pmtiles annually when the new fuel grid raster
    is received from BCWS Geospatial. Typically stored in s3: {bucket}/psu/pmtiles/fuel
    """
    set_s3_gdal_config()
    field_name = "fuel"

    with (
        polygonize_in_memory(fuel_grid_path, "fuel", field_name) as layer,
        TemporaryDirectory() as temp_dir,
    ):
        temp_geojson = write_geojson(layer, temp_dir)

        tippecanoe_wrapper(temp_geojson, output_path, min_zoom=min_zoom, max_zoom=max_zoom)


def generate_high_res_fuel_grid_pmtiles():
    with TemporaryDirectory() as temp_dir:
        reclassified_geotiff = f"{temp_dir}/fuel_grid_reclass.tif"
        high_res_partial_pmtiles = f"{temp_dir}/fuel_grid_high_res.pmtiles"
        low_res_partial_pmtiles = f"{temp_dir}/fuel_grid_low_res.pmtiles"

        # Reclassify the fuel grid raster
        reclassified_fuel_grid = reclassify_fuel_geotiff(high_res_geotiff, reclassified_geotiff)

        # Generate PMTiles from the reclassified fuel grid
        print("Generating high resolution PMTiles...")
        generate_fuel_pmtiles(
            reclassified_fuel_grid, high_res_partial_pmtiles, min_zoom=7, max_zoom=12
        )

        # Generate low resolution PMTiles for higher zoom levels
        print("Generating 2km fuel grid PMTiles...")
        generate_fuel_pmtiles(low_res_geotiff, low_res_partial_pmtiles, min_zoom=4, max_zoom=6)

        # merge pmtiles files
        print("Merging PMTiles files...")
        merge_pmtiles([high_res_partial_pmtiles, low_res_partial_pmtiles], high_res_pmtiles_output)
    print(f"Final PMTiles file created at: {high_res_pmtiles_output}")


def generate_2km_fuel_grid_pmtiles():
    print("Generating 2km fuel grid PMTiles...")
    generate_fuel_pmtiles(low_res_geotiff, low_res_pmtiles_output)


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "highres":
        generate_high_res_fuel_grid_pmtiles()
    else:
        generate_2km_fuel_grid_pmtiles()
