name: Static Analysis

on:
  push:
    branches:
      - main

jobs:
  coverage:
    name: SonarQube / CodeCov - (main)
    # Ubuntu 18.04 (a.k.a. ubuntu-latest) comes with gdal 2.2.3, which has bugs that cause unit tests to fail
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8]
        node-version: [14.x]
        R: ["3.5.2"]
    steps:
      - name: Checkout repo (main)
        uses: actions/checkout@v2
        with:
          # For sonar-scanner to work properly we can't use a shallow fetch.
          fetch-depth: 0

      # - name: Install libgdal-dev (api)
      #   # The python gdal and R component relies on libgdal-dev being installed.
      #   run: |
      #     sudo apt-get update --fix-missing && sudo apt-get -y install libgdal-dev

      # - uses: r-lib/actions/setup-r@v1
      #   with:
      #     r-version: ${{ matrix.R }}

      # - name: Cache renv (api)
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.local/share/renv
      #     key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-renv-

      # - name: Install renv (api)
      #   run: |
      #     install.packages("renv")
      #     renv::install("cffdrs", dependencies = TRUE)
      #     renv::consent(TRUE)
      #     renv::restore()
      #   shell: Rscript {0}

      # - name: Setup kernel for react, increase watchers
      #   run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      # - name: Setup Python ${{ matrix.python-version }} (api)
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: ${{ matrix.node-version }}

      # - name: Cache poetry installer
      #   uses: actions/cache@v2
      #   id: cache-poetry-installer
      #   env:
      #     cache-name: cache-poetry-installer
      #   with:
      #     path: "~/poetry_installer"
      #     key: "1.1.8"

      # - name: Download poetry installer
      #   if: steps.cache-poetry-installer.outputs.cache-hit != 'true'
      #   run: |
      #     echo
      #     mkdir ~/poetry_installer
      #     curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py > ~/poetry_installer/get-poetry.py

      # - name: Install poetry (api)
      #   run: |
      #     cd ~/poetry_installer
      #     python get-poetry.py --version 1.1.8
      #     source ~/.poetry/env
      #     poetry config virtualenvs.create true
      #     poetry config virtualenvs.in-project false

      # # poetry cache folder: /home/runner/.cache/pypoetry
      # - name: Cache poetry
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-poetry
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: ${{ runner.os }}-poetry-cache-${{ hashFiles('**/poetry.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-poetry-cache-

      # - name: Install gdal python (api)
      #   # We don't have much control over what version of gdal we're getting, it's pretty much whatever is
      #   # available to us. As such, gdal is not installed by poetry, since the version will differ between
      #   # platforms.
      #   # Also have to be absolutely sure that numpy is installed before gdal (otherwise gdal doesn't install
      #   # correctly, and you'll run into ndarray errors.)
      #   working-directory: ./api
      #   run: |
      #     source ~/.poetry/env
      #     poetry run pip install numpy
      #     CPLUS_INCLUDE_PATH=/usr/include/gdal C_INCLUDE_PATH=/usr/include/gdal poetry run pip install gdal==$(gdal-config --version)

      # - name: Install remaining python dependencies (api)
      #   working-directory: ./api
      #   run: |
      #     source ~/.poetry/env
      #     poetry install

      # - name: Unit Test with coverage (api)
      #   working-directory: ./api
      #   run: |
      #     source ~/.poetry/env
      #     export LD_LIBRARY_PATH=$(poetry run python -m rpy2.situation LD_LIBRARY_PATH):${LD_LIBRARY_PATH}
      #     export CLASSPATH=./libs/REDapp_Lib.jar:./libs/WTime.jar:./libs/hss-java.jar:$CLASSPATHpoetry
      #     export ORIGINS=testorigin
      #     poetry run coverage run --source=app -m pytest -o log_cli=true --disable-warnings -vvv

      # - name: Create coverage report (api)
      #   working-directory: ./api
      #   shell: bash
      #   run: |
      #     source ~/.poetry/env
      #     poetry run coverage report
      #     poetry run coverage xml -o coverage-reports/coverage-report.xml

      # - uses: actions/cache@v2
      #   with:
      #     path: |
      #       **/node_modules
      #       ~/.cache/Cypress
      #     key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      # - name: Install node dependencies (web)
      #   working-directory: ./web
      #   if: steps.yarn-cache.outputs.cache-hit != 'true'
      #   run: yarn install

      # - name: Lint (web)
      #   working-directory: ./web
      #   run: yarn run lint

      # # "Error: ENOSPC: System limit for number of file watchers reached" can be addressed
      # # with this: https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers#the-technical-details
      # # It seems unnecessary at the moment because tests pass anyway
      # - name: Cypress tests with coverage (web)
      #   working-directory: ./web
      #   run: yarn run cypress:ci

      # - name: Unit tests (web)
      #   working-directory: ./web
      #   run: yarn run test:ci

      # - name: Upload test coverage to Codecov
      #   uses: codecov/codecov-action@v1.5.2
      #   with:
      #     token: ${{secrets.CODECOV_TOKEN}}
      #     fail_ci_if_error: false
