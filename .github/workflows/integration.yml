name: Integration

on:
  pull_request:
    branches:
      - main
jobs:
  lint-api:
    name: Lint (api)
    uses: ./.github/workflows/.poetry_and_r.yml
    with:
      poetry_command: poetry run ruff app/*.py app/**/*.py
      working_directory: ./api
      setup_r: false
      upload_coverage: false
  test-api:
    name: Python - Test with coverage
    uses: ./.github/workflows/.poetry_and_r.yml
    with:
      poetry_command: |
        export LD_LIBRARY_PATH=$(poetry run python -m rpy2.situation LD_LIBRARY_PATH):${LD_LIBRARY_PATH}
        export CLASSPATH=./libs/REDapp_Lib.jar:./libs/WTime.jar:./libs/hss-java.jar:$CLASSPATH
        export ORIGINS=testorigin
        export SFMS_SECRET=secret
        poetry run coverage run --source=app -m pytest app/tests -x -o log_cli=true --disable-warnings -vvv
      working_directory: ./api
      setup_r: true
      upload_coverage: true

  lint-and-test-web:
    name: Web - Lint, Test with coverage
    uses: ./.github/workflows/.web.yml

  upload-code-coverage:
    name: Coverage with CodeCov
    runs-on: ubuntu-22.04
    needs: [lint-and-test-web, test-api]
    steps:
      # we need to checkout, so that we have codecov.yml
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          # we want to ensure code coverage is good, so we fail on error. (default is false)
          fail_ci_if_error: true
  lint-and-test-prune:
    name: Backup Prune - Lint and Test
    # We have to use an older ubuntu version, because of the older version of python that the
    # backup script uses.
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.11.2]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # For sonar-scanner to work properly we can't use a shallow fetch.
          fetch-depth: 0
      - name: Setup Python ${{ matrix.python-version }} (api)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache poetry installer
        uses: actions/cache@v4
        id: cache-poetry-installer
        env:
          cache-name: cache-poetry-installer
        with:
          path: "~/poetry_installer"
          key: "poetry-installer-1.7.1"
      - name: Download poetry installer
        if: steps.cache-poetry-installer.outputs.cache-hit != 'true'
        run: |
          echo
          mkdir ~/poetry_installer
          curl -sSL https://install.python-poetry.org > ~/poetry_installer/install-poetry.py
      - name: Install poetry (api)
        run: |
          cd ~/poetry_installer
          python install-poetry.py --version 1.7.1
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
      # poetry cache folder: /home/runner/.cache/pypoetry
      - name: Cache poetry
        uses: actions/cache@v4
        env:
          cache-name: cache-poetry
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-prune-cache-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-prune-cache-
      - name: Install python dependencies using poetry (s3-backup)
        working-directory: ./openshift/s3-backup/docker
        run: |
          poetry install
      - name: Lint (s3-backup)
        working-directory: ./openshift/s3-backup/docker
        run: poetry run pylint *.py
      - name: Unit tests (s3-backup)
        working-directory: ./openshift/s3-backup/docker
        run: |
          poetry run pytest -v
