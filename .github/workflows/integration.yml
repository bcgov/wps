name: Integration

on:
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint, Test with Coverage & SonarQube
    # Ubuntu 18.04 (a.k.a. ubuntu-latest) comes with gdal 2.2.3, which has bugs that cause unit tests to fail
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          # For sonar-scanner to work properly we can't use a shallow fetch.
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py > /tmp/get-poetry.py
          cd /tmp
          POETRY_HOME=/opt/poetry python get-poetry.py --version 1.0.8
          cd /usr/local/bin
          /opt/poetry/bin/poetry config virtualenvs.create false

      - name: Install libgdal-dev
        # The python gdal component relies on libgdal-dev being installed.
        run: |
          sudo apt-get -y update
          sudo apt-get -y install libgdal-dev

      - name: Install gdal python
        # We don't have much control over what version of gdal we're getting, it's pretty much whatever is
        # available to us. As such, gdal is not installed by poetry, since the versio will differ between
        # platforms.
        run: CPLUS_INCLUDE_PATH=/usr/include/gdal C_INCLUDE_PATH=/usr/include/gdal python3 -m pip install gdal==$(gdal-config --version)

      - name: Install python dependencies
        run: |
          cp api/pyproject.toml api/poetry.lock /tmp/
          cd /tmp
          /opt/poetry/bin/poetry install --no-root

      # - name: Lint
      #   run: python3 -m pylint --rcfile=api/.pylintrc api/app/*.py api/app/**/*.py

      - name: Unit Test (with coverage)
        run: ORIGINS=testorigin coverage run --source=api/app -m pytest -o log_cli=true --disable-warnings --verbose

      - name: Create coverage report
        shell: bash
        run: |
          coverage report
          coverage xml -o coverage-reports/coverage-report.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        # with:
        #   projectBaseDir: api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
