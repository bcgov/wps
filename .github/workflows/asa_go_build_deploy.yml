name: Publish ASA Go

env:
  appBuildNumber: ${{ github.run_number }}
  appBuildVersion: "1.0.1"

permissions:
  contents: read

on:
  workflow_dispatch:

jobs:
  check-secrets:
    runs-on: ubuntu-22.04
    steps:
        - name: Check secrets
          shell: bash
          run: |
            required_env_vars=(
            "CERTIFICATE"
            "KEYCHAIN_PASSWD"
            # "PROVISIONING_PROFILE"
            )
            for var in "${required_env_vars[@]}"; do
            if [ -z "${!var}" ]; then
                echo "error: $var is not set."
                exit 1
            fi
            done
          env:
            CERTIFICATE: ${{ secrets.APPLE_APP_STORE_BUILD_CERTIFICATE_BASE64 }}
            KEYCHAIN_PASSWD: ${{ secrets.APPLE_APP_STORE_BUILD_CERTIFICATE_PASSWD }}
            PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
  build-and-publish:
    name: Build and deploy 
    needs: [check-secrets]
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Ionic CLI
        working-directory: ./mobile/asa-go
        run: npm install -g @ionic/cli
      - name: XCode select 16.4
        run: |
          sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
      - uses: actions/cache@v4
        id: asa-go-cache
        with:
          path: |
            mobile/asa-go/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        id: asa-go-keycloak-cache
        with:
          path: |
            mobile/keycloak/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install keycloak plugin
        working-directory: ./mobile/keycloak
        if: steps.asa-go-keycloak-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Install dependencies
        working-directory: ./mobile/asa-go
        if: steps.asa-go-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Create environment settings
        working-directory: ./mobile/asa-go
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_KEYCLOAK_AUTH_URL: ${{ secrets.VITE_KEYCLOAK_AUTH_URL }}
          VITE_KEYCLOAK_REALM: ${{ secrets.VITE_KEYCLOAK_REALM }}
          VITE_KEYCLOAK_CLIENT: ${{ secrets.VITE_KEYCLOAK_CLIENT }}
          VITE_PMTILES_BUCKET: ${{ secrets.VITE_PMTILES_BUCKET }}
          VITE_MUI_LICENSE_KEY: ${{ secrets.VITE_MUI_LICENSE_KEY }}
        run: |
          echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}" >.env.production
          echo "VITE_KEYCLOAK_AUTH_URL=${VITE_KEYCLOAK_AUTH_URL}" >>.env.production
          echo "VITE_KEYCLOAK_REALM=${VITE_KEYCLOAK_REALM}" >>.env.production
          echo "VITE_KEYCLOAK_CLIENT=${VITE_KEYCLOAK_CLIENT}" >>.env.production
          echo "VITE_PMTILES_BUCKET=${VITE_PMTILES_BUCKET}" >>.env.production
          echo "VITE_MUI_LICENSE_KEY=${VITE_MUI_LICENSE_KEY}" >>.env.production

      - name: Build Capacitor and Sync
        working-directory: ./mobile/asa-go
        run: |
            yarn build:prod
            yarn cap sync ios
      - name: Setup iOS Signing
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_APP_STORE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_APP_STORE_BUILD_CERTIFICATE_PASSWD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create temporary files
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Decode certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Bump Build Number
        working-directory: mobile/asa-go/ios/App
        run: |
          # Update version and build number
          agvtool new-version ${{ env.appBuildNumber }}
          agvtool new-marketing-version ${{ env.appBuildVersion }}
      - name: Build and Archive
        working-directory: mobile/asa-go/ios/App
        run: |         
          # Archive the app
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme "ASA Go" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath ${{ runner.temp }}/ASA-Go.xcarchive \
            archive
      - name: Export IPA
        working-directory: mobile/asa-go/ios/App
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath ${{ runner.temp }}/ASA-Go.xcarchive \
            -exportPath ${{ runner.temp }}/export \
            -exportOptionsPlist exportOptions.plist
      - uses: actions/upload-artifact@v4
        with:
          name: ASA-Go-IPA
          path: ${{ runner.temp }}/export/*.ipa
          retention-days: 1
          if-no-files-found: error

      - name: Push to app store
        env:
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER_95 }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_95 }}
        working-directory: mobile/asa-go/ios/App
        run: |
          mkdir $HOME/.private_keys/
          echo -n "$APP_STORE_CONNECT_PRIVATE_KEY" > $HOME/.private_keys/AuthKey_${APP_STORE_CONNECT_KEY_IDENTIFIER}.p8

          xcrun altool --validate-app -f ${{ runner.temp }}/export/*.ipa -t ios --apiKey ${APP_STORE_CONNECT_KEY_IDENTIFIER} --apiIssuer ${APP_STORE_CONNECT_ISSUER_ID}
          xcrun altool --upload-app -f ${{ runner.temp }}/export/*.ipa -t ios --apiKey ${APP_STORE_CONNECT_KEY_IDENTIFIER} --apiIssuer ${APP_STORE_CONNECT_ISSUER_ID}