name: Build and deploy ASA Go

env:
  appBuildNumber: ${{ github.run_number }}
  appBuildVersion: "1.0.0"

permissions:
  contents: read

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-secrets:
    runs-on: ubuntu-22.04
    steps:
        - name: Check secrets
          shell: bash
          run: |
            required_env_vars=(
            "CERTIFICATE"
            "KEYCHAIN_PASSWD"
            "PROVISIONING_PROFILE"
            )
            for var in "${required_env_vars[@]}"; do
            if [ -z "${!var}" ]; then
                echo "error: $var is not set."
                exit 1
            fi
            done
          env:
            CERTIFICATE: ${{ secrets.APPLE_APP_STORE_BUILD_CERTIFICATE_BASE64 }}
            KEYCHAIN_PASSWD: ${{ secrets.APPLE_APP_STORE_BUILD_CERTIFICATE_PASSWD }}
            PROVISIONING_PROFILE: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  build-and-publish:
    name: Build and test ASA Go
    needs: [check-secrets]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Ionic CLI
        working-directory: ./mobile/asa-go
        run: npm install -g @ionic/cli
      - uses: actions/cache@v4
        id: asa-go-cache
        with:
          path: |
            mobile/asa-go/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        id: asa-go-keycloak-cache
        with:
          path: |
            mobile/keycloak/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install keycloak plugin
        working-directory: ./mobile/keycloak
        if: steps.asa-go-keycloak-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Install dependencies
        working-directory: ./mobile/asa-go
        if: steps.asa-go-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Create environment settings
        working-directory: ./mobile/asa-go
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_KEYCLOAK_AUTH_URL: ${{ secrets.VITE_KEYCLOAK_AUTH_URL }}
          VITE_KEYCLOAK_REALM: ${{ secrets.VITE_KEYCLOAK_REALM }}
          VITE_KEYCLOAK_CLIENT: ${{ secrets.VITE_KEYCLOAK_CLIENT }}
          VITE_PMTILES_BUCKET: ${{ secrets.VITE_PMTILES_BUCKET }}
          VITE_MUI_LICENSE_KEY: ${{ secrets.VITE_MUI_LICENSE_KEY }}
        run: |
          echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}" >.env.production
          echo "VITE_KEYCLOAK_AUTH_URL=${VITE_KEYCLOAK_AUTH_URL}" >>.env.production
          echo "VITE_KEYCLOAK_REALM=${VITE_KEYCLOAK_REALM}" >>.env.production
          echo "VITE_KEYCLOAK_CLIENT=${VITE_KEYCLOAK_CLIENT}" >>.env.production
          echo "VITE_PMTILES_BUCKET=${VITE_PMTILES_BUCKET}" >>.env.production
          echo "VITE_MUI_LICENSE_KEY=${VITE_MUI_LICENSE_KEY}" >>.env.production
      - name: Bump Build No.
        working-directory: mobile/asa-go/ios
        env:
          CURRENT_PROJECT_VERSION: ${{ env.appBuildNumber }}
          MARKETING_VERSION: ${{ env.appBuildVersion }}
        run: |
          agvtool new-version ${CURRENT_PROJECT_VERSION} && \
          agvtool new-marketing-version ${MARKETING_VERSION}
      - name: Build
        working-directory: ./mobile/asa-go
        run: |
            yarn build:prod
            yarn cap sync ios
      - name: Build For Release
        run: |
          xcodebuild \
          -workspace mobile/asa-go/ios/App/App.xcworkspace \
          -scheme "Keycloak" \
          -configuration Release \
          -sdk iphoneos \
          -derivedDataPath ${{ runner.temp }}/DerivedData \
          -archivePath ${{ runner.temp }}/DerivedData/App.xcarchive \
          archive
    #   - name: Export Archive TODO: enable when new certs created
    #     # This is the step that signs the build
    #     run: |
    #       xcodebuild \
    #       -exportArchive \
    #       -archivePath ${{ runner.temp }}/DerivedData/App.xcarchive \
    #       -exportPath ${{ runner.temp }}/Export \
    #       -exportOptionsPlist exportOptions.plist \
    #       -verbose