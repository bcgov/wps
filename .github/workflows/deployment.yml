name: Deployment

on:
  pull_request:
    branches:
      - main

jobs:
  prepare-dev-database:
    name: Prepare Dev Database
    runs-on: ubuntu-20.04
    steps:
      - name: Set Variables
        shell: bash
        run: |
          echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy PostGIS instance
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          EPHEMERAL_STORAGE=True bash openshift/scripts/oc_provision_db.sh ${SUFFIX} apply

  prepare-dev-database-backups:
    name: Prepare Dev Database Backups
    needs: [prepare-dev-database]
    runs-on: ubuntu-20.04
    steps:
      - name: Set Variables
        shell: bash
        run: |
          echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Postgres Backup Deployment Config
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          EPHEMERAL_STORAGE=True bash openshift/scripts/oc_provision_backup_postgres.sh ${SUFFIX} apply

      - name: Postgres Backup Cronjob
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          EPHEMERAL_STORAGE=True bash openshift/scripts/oc_provision_backup_postgres_cronjob.sh ${SUFFIX} apply

      - name: Prepare MariaDB Backup Deployment Config
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          EPHEMERAL_STORAGE=True bash openshift/scripts/oc_provision_backup_mariadb.sh ${SUFFIX} apply

      - name: Prepare MariaDB Backup Cronjob
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          EPHEMERAL_STORAGE=True bash openshift/scripts/oc_provision_backup_mariadb_cronjob.sh ${SUFFIX} apply

  build-image:
    name: Build Image
    runs-on: ubuntu-20.04
    steps:
      - name: Set Variables
        shell: bash
        run: |
          echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Image
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_TOOL_TOKEN }}"
          GIT_BRANCH=${GITHUB_HEAD_REF} bash openshift/scripts/oc_build.sh ${SUFFIX} apply

  deploy-dev:
    name: Deploy to Dev
    needs: [build-image, prepare-dev-database]
    runs-on: ubuntu-20.04
    steps:
      - name: Set Variables
        shell: bash
        run: |
          echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy to Dev
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          SECOND_LEVEL_DOMAIN="apps.silver.devops.gov.bc.ca" VANITY_DOMAIN="${SUFFIX}-dev-psu.nrs.gov.bc.ca" bash openshift/scripts/oc_deploy.sh ${SUFFIX} apply

      - name: Hourly actuals cronjob (Marvin)
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          bash openshift/scripts/oc_provision_bcfw_p1_hourly_actuals_cronjob.sh ${SUFFIX} apply

      - name: Noon forecasts cronjob (Bender)
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          bash openshift/scripts/oc_provision_bcfw_p1_forecasts_cronjob.sh ${SUFFIX} apply

      - name: Environment Canada GDPS cronjob (Donald)
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          PROJ_DEV="e1e498-dev" bash openshift/scripts/oc_provision_ec_gdps_cronjob.sh ${SUFFIX} apply

      - name: Environment Canada HRDPS cronjob (Donald)
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          bash openshift/scripts/oc_provision_ec_hrdps_cronjob.sh ${SUFFIX} apply

      - name: Environment Canada RDPS cronjob (Donald)
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          bash openshift/scripts/oc_provision_ec_rdps_cronjob.sh ${SUFFIX} apply

  scan-dev:
    name: ZAP Baseline Scan Dev
    needs: [deploy-dev]
    runs-on: ubuntu-20.04

    steps:
      # f.y.i.: ZAP Scan must be able to log an issue or it will fail.
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: "https://wps-pr-${{ github.event.number }}.apps.silver.devops.gov.bc.ca"
          rules_file_name: ".zap/rules.tsv"
          # Do not return failure on warnings - TODO: this has to be resolved!
          cmd_options: "-I"

  build-ubuntu-image:
    # C-Haines relies on a gdal version not currently available in the debian image we use,
    # so we need to create an ubuntu based image.
    name: Build ubuntu based image
    runs-on: ubuntu-20.04

    steps:
      - name: Set Variables
        shell: bash
        run: echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Image
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_TOOL_TOKEN }}"
          GIT_BRANCH=${GITHUB_HEAD_REF} PROJ_TOOLS="e1e498-tools" PROJ_DEV="e1e498-dev" NAME_APP=wps-ubuntu DOCKER_IMAGE=image-registry.openshift-image-registry.svc:5000/e1e498-tools/ubuntu-base:20.04 DOCKER_FILE=Dockerfile.ubuntu bash openshift/scripts/oc_build.sh ${SUFFIX} apply

  deploy-c-haines:
    name: Deploy c-haines cronjob
    runs-on: ubuntu-20.04
    # We need
    # - the image to be built before we can deploy.
    # - the database to be there (so we can write to it).
    # - wait for the api deployment, as it's responsible for upgrading the database.
    needs: [build-ubuntu-image, prepare-dev-database, deploy-dev]

    steps:
      - name: Set Variables
        shell: bash
        run: echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: C-Haines Cronjob
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_DEV_TOKEN }}"
          PROJ_TARGET="e1e498-dev" PROJ_TOOLS="e1e498-tools" PROJ_DEV="e1e498-dev" bash openshift/scripts/oc_provision_c_haines_cronjob.sh ${SUFFIX} apply

  prepare-test-database:
    name: Prepare Test Database
    runs-on: ubuntu-20.04
    steps:
      - name: Set Variables
        shell: bash
        run: |
          echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy PostGIS instance
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_TEST_TOKEN }}"
          EPHEMERAL_STORAGE=True PROJ_TARGET=e1e498-test APP_USER="wps" IMAGE_STREAM_NAMESPACE=e1e498-tools bash openshift/scripts/oc_provision_db.sh ${SUFFIX} apply

  deploy-test:
    name: Deploy to Test
    needs: [build-image, prepare-test-database]
    runs-on: ubuntu-20.04
    steps:
      - name: Set Variables
        shell: bash
        run: |
          echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy to Test
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_TEST_TOKEN }}"
          PROJ_TARGET="e1e498-test" ENVIRONMENT="-test" VANITY_DOMAIN="${SUFFIX}-test-psu.nrs.gov.bc.ca" SECOND_LEVEL_DOMAIN="apps.silver.devops.gov.bc.ca" USE_WFWX="True" bash openshift/scripts/oc_deploy.sh ${SUFFIX} apply

      # Just run 1/3 EnvCan cronjobs so there's some model data in DB for comparison against P3 actuals and forecasts
      # Don't need all model data
      - name: Environment Canada RDPS cronjob (Donald)
        shell: bash
        run: |
          oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_TEST_TOKEN }}"
          PROJ_TARGET="e1e498-test" bash openshift/scripts/oc_provision_ec_rdps_cronjob.sh ${SUFFIX} apply

  accept:
    # We want to be sure that an outside collaborator can't deploy using a fork, without us marking
    # the pr as pr/accepted
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3.1.0
        env:
        with:
          script: |
            console.log('-- CONTEXT --')
            console.dir(context)
            const [repository_owner, repository_name] = process.env.GITHUB_REPOSITORY.split('/')

            console.log(`GITHUB_SHA: ${process.env.GITHUB_SHA}`)
            console.log(`GITHUB_EVENT_NAME: ${process.env.GITHUB_EVENT_NAME}`)
            console.log(`repository (owner): ${repository_owner}`)
            console.log(`repository (name): ${repository_name}`)
            console.log(`repository (fullname): ${process.env.GITHUB_REPOSITORY}`)
            console.log(`Sender (username): ${context.payload.sender.login}`)

            const isCollaborator = (await github.repos.checkCollaborator({owner: repository_owner, repo: repository_name, username: context.payload.sender.login}).catch((err)=>{ return {status: 404}})).status == 204 
            console.log(`Sender (collaborator?): ${isCollaborator}`)
            if (context.eventName == 'pull_request' || context.eventName == 'pull_request_target') {
                const isFromAFork = context.payload.pull_request.head.repo.full_name !== process.env.GITHUB_REPOSITORY
                console.log(`PR > Source Repository (full name): ${context.payload.pull_request.head.repo.full_name}`)
                console.log(`PR > Is From a Fork?: ${isFromAFork}`)
                if(isFromAFork === true) {
                  const labels = (await github.issues.listLabelsOnIssue({owner: repository_owner, repo: repository_name, issue_number:context.payload.pull_request.number})).data
                  const isPrAccepted = labels.find( ({ name }) => name === 'pr/accepted' ) !== undefined
                  console.log(`PR > isPrAccepted: ${isPrAccepted}`)
                  if(isPrAccepted === false) {
                    core.setFailed('Pull Request from non-contributors fork is not accepted. Add a "pr/accepted" label to the PR to accept and trust changes coming from this PR.')   
                  }
                }
            }

  approve:
    # Check that PR label pr/approved has been set.
    needs: [accept]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3.1.0
        with:
          script: |
            const [repository_owner, repository_name] = process.env.GITHUB_REPOSITORY.split('/')
            const labels = (await github.issues.listLabelsOnIssue({owner: repository_owner, repo: repository_name, issue_number:context.payload.pull_request.number})).data
            const isPrApproved = labels.find( ({ name }) => name === 'pr/approved' ) !== undefined
            console.log(`PR > isPrApproved: ${isPrApproved}`)
            if(isPrApproved === false) {
              core.setFailed('Pull Request not approved for deployment. Add a "pr/approved" label to the PR when ready to deploy to production.')   
            }

  deploy-prod:
    # If PR has been deployed in dev and test environment, and has been approved - we deploy to production.
    needs: [deploy-dev, deploy-test, approve]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
