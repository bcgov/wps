name: Post Merge Integration

permissions:
  contents: read # Required for actions/checkout
  actions: read # Allows downloading workflow artifacts
  checks: write # For uploading test results (if needed)
  pull-requests: write # For status reporting (if needed)

on:
  push:
    branches:
      - main

jobs:
  lint-api:
    name: Python - Lint
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/bcgov/wps/wps-api-base:06-30-2025
      options: --user 0
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ~/work/wps/wps/api/.venv
          key: ${{ runner.os }}-venv-poetry-1.8.3-${{ hashFiles('**/poetry.lock') }}
      - name: Install python dependencies using poetry (api)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        working-directory: ./api
        run: |
          poetry run python -m pip install --upgrade pip
          poetry install
          poetry run python -m pip install --no-build-isolation --no-cache-dir --force-reinstall gdal==$(gdal-config --version)
      - name: Reinstall wps_shared
        working-directory: ./api
        run: |
          poetry run python -m pip install --no-deps --force-reinstall ../wps_shared
      - name: Lint (api/wps_shared)
        # We used to be able to do linting before installing gdal, but it's not possible anymore.
        # We can however place it ahead of the R installs.
        working-directory: ./api
        run: |
          poetry run ruff check app/*.py app/**/*.py ../wps_shared/wps_shared/*.py ../wps_shared/wps_shared/**/*.py ../wps_jobs/wps_jobs/*.py ../wps_jobs/wps_jobs/**/*.py

  test-api:
    name: Python - API Test with coverage
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/bcgov/wps/wps-api-base:06-30-2025
      options: --user 0
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          # For sonar-scanner to work properly we can't use a shallow fetch.
          fetch-depth: 0
      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ~/work/wps/wps/api/.venv
          key: ${{ runner.os }}-venv-poetry-1.8.3-${{ hashFiles('**/poetry.lock') }}
      - name: Install python dependencies using poetry (api)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        working-directory: ./api
        run: |
          # Install JDK
          apt-get update --fix-missing
          apt-get -y install default-jdk
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          poetry run python -m pip install --upgrade pip
          poetry install
          poetry run python -m pip install --no-build-isolation --no-cache-dir --force-reinstall gdal==$(gdal-config --version)
      - name: Reinstall wps_shared
        working-directory: ./api
        run: |
          poetry run python -m pip install --no-deps --force-reinstall ../wps_shared
      - name: Unit Test with coverage (api)
        working-directory: ./api
        run: |
          export LD_LIBRARY_PATH=$(poetry run python -m rpy2.situation LD_LIBRARY_PATH):${LD_LIBRARY_PATH}
          export CLASSPATH=./libs/REDapp_Lib.jar:./libs/WTime.jar:./libs/hss-java.jar:$CLASSPATH
          export ORIGINS=testorigin
          export SFMS_SECRET=secret
          poetry run pytest -n auto --cov=app --cov-branch --cov-report=xml:coverage-reports/api-coverage-report.xml app/tests -x -o log_cli=true --disable-warnings -vvv
      - name: Archive coverage report (api)
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage-report
          path: ./api/coverage-reports/api-coverage-report.xml
  test-wps-jobs:
    name: Python - WPS Jobs Test with coverage
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/bcgov/wps/wps-api-base:06-30-2025
      options: --user 0
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          # For sonar-scanner to work properly we can't use a shallow fetch.
          fetch-depth: 0
      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ~/work/wps/wps/wps_jobs/.venv
          key: ${{ runner.os }}-venv-poetry-1.8.3-${{ hashFiles('**/poetry.lock') }}
      - name: Install python dependencies using poetry (wps_jobs)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        working-directory: ./wps_jobs
        run: |
          # Install JDK
          apt-get update --fix-missing
          apt-get -y install default-jdk
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          poetry run python -m pip install --upgrade pip
          poetry install
          poetry run python -m pip install -U setuptools wheel
          poetry run python -m pip install --no-build-isolation --no-cache-dir --force-reinstall gdal==$(gdal-config --version)
      - name: Reinstall wps_shared
        working-directory: ./wps_jobs
        run: |
          poetry run python -m pip install --force-reinstall ../wps_shared
      - name: Unit Test with coverage (wps_jobs)
        working-directory: ./wps_jobs
        run: |
          export ORIGINS=testorigin
          export SFMS_SECRET=secret
          poetry run pytest -n auto --cov=wps_jobs --cov-branch --cov-report=xml:coverage-reports/wps-jobs-coverage-report.xml tests -x -o log_cli=true --disable-warnings -vvv
      - name: Archive coverage report (wps_jobs)
        uses: actions/upload-artifact@v4
        with:
          name: wps-jobs-coverage-report
          path: ./wps_jobs/coverage-reports/wps-jobs-coverage-report.xml
  test-wps-shared:
    name: Python - WPS Shared Test with coverage
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/bcgov/wps/wps-api-base:06-30-2025
      options: --user 0
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          # For sonar-scanner to work properly we can't use a shallow fetch.
          fetch-depth: 0
      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ~/work/wps/wps/wps_shared/.venv
          key: ${{ runner.os }}-venv-poetry-1.8.3-${{ hashFiles('**/poetry.lock') }}
      - name: Install python dependencies using poetry (wps_shared)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        working-directory: ./wps_shared
        run: |
          # Install JDK
          apt-get update --fix-missing
          apt-get -y install default-jdk
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          poetry run python -m pip install --upgrade pip
          poetry install
          poetry run python -m pip install -U setuptools wheel
          poetry run python -m pip install --no-build-isolation --no-cache-dir --force-reinstall gdal==$(gdal-config --version)
      - name: Unit Test with coverage (wps_shared)
        working-directory: ./wps_shared
        run: |
          export ORIGINS=testorigin
          export SFMS_SECRET=secret
          poetry run pytest --cov=wps_shared --cov-branch --cov-report=xml:coverage-reports/wps-shared-coverage-report.xml wps_shared/tests -x -o log_cli=true --disable-warnings -vvv
      - name: Archive coverage report (wps_shared)
        uses: actions/upload-artifact@v4
        with:
          name: wps-shared-coverage-report
          path: ./wps_shared/coverage-reports/wps-shared-coverage-report.xml
  lint-and-test-web:
    name: Web - Lint, Test with coverage
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          # For sonar-scanner to work properly we can't use a shallow fetch.
          fetch-depth: 0
      - name: Setup kernel for react, increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: |
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: enable corepack
        run: corepack enable
      - name: use new yarn
        run: yarn set version berry
      - name: Install node dependencies (web)
        working-directory: ./web
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Lint (web)
        working-directory: ./web
        run: yarn run lint
      # "Error: ENOSPC: System limit for number of file watchers reached" can be addressed
      # with this: https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers#the-technical-details
      # It seems unnecessary at the moment because tests pass anyway
      - name: Cypress tests with coverage (web)
        working-directory: ./web
        run: yarn run cypress:ci
      - name: Unit tests (web)
        working-directory: ./web
        run: yarn run coverage:ci
      - name: Merge and finalize test coverage (web)
        working-directory: ./web
        run: yarn run finalizeCoverage

      - name: Archive coverage report (web)
        uses: actions/upload-artifact@v4
        with:
          name: web-coverage-report
          path: ./web/finalCoverage
  upload-code-coverage:
    name: Coverage with CodeCov
    runs-on: ubuntu-24.04
    needs: [lint-and-test-web, test-api, test-wps-jobs, test-wps-shared]
    steps:
      # we need to checkout, so that we have codecov.yml
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v5
      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          # we want to ensure code coverage is good, so we fail on error. (default is false)
          fail_ci_if_error: true
