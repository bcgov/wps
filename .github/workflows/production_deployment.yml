name: Production Deployment

on:
  workflow_run:
    workflows: ["Integration", "Deployment"]
    branches:
      - main
    types:
      - completed
      - requested
jobs:
  accept:
    # We want to be sure that an outside collaborator can't deploy using a fork, without us marking
    # the pr as pr/accepted
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/github-script@v3.1.0
        with:
          script: |
            console.log('-- CONTEXT --')
            console.dir(context)
            const [repository_owner, repository_name] = process.env.GITHUB_REPOSITORY.split('/')

            console.log(`GITHUB_SHA: ${process.env.GITHUB_SHA}`)
            console.log(`GITHUB_EVENT_NAME: ${process.env.GITHUB_EVENT_NAME}`)
            console.log(`repository (owner): ${repository_owner}`)
            console.log(`repository (name): ${repository_name}`)
            console.log(`repository (fullname): ${process.env.GITHUB_REPOSITORY}`)
            console.log(`Sender (username): ${context.payload.sender.login}`)

            const isCollaborator = (await github.repos.checkCollaborator({owner: repository_owner, repo: repository_name, username: context.payload.sender.login}).catch((err)=>{ return {status: 404}})).status == 204 
            console.log(`Sender (collaborator?): ${isCollaborator}`)
            if (context.eventName == 'pull_request' || context.eventName == 'pull_request_target') {
                const isFromAFork = context.payload.pull_request.head.repo.full_name !== process.env.GITHUB_REPOSITORY
                console.log(`PR > Source Repository (full name): ${context.payload.pull_request.head.repo.full_name}`)
                console.log(`PR > Is From a Fork?: ${isFromAFork}`)
                if(isFromAFork === true) {
                  const labels = (await github.issues.listLabelsOnIssue({owner: repository_owner, repo: repository_name, issue_number:context.payload.pull_request.number})).data
                  const isPrAccepted = labels.find( ({ name }) => name === 'pr/accepted' ) !== undefined
                  console.log(`PR > isPrAccepted: ${isPrAccepted}`)
                  if(isPrAccepted === false) {
                    core.setFailed('Pull Request from non-contributors fork is not accepted. Add a "pr/accepted" label to the PR to accept and trust changes coming from this PR.')   
                  }
                }
            }

  approve:
    # Check that PR label pr/approved has been set.
    # Was doing: core.setFailed('....') - but that results in a lot of noise
    needs: [accept]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/github-script@v3.1.0
        with:
          script: |
            const [repository_owner, repository_name] = process.env.GITHUB_REPOSITORY.split('/')
            const labels = (await github.issues.listLabelsOnIssue({owner: repository_owner, repo: repository_name, issue_number:context.payload.pull_request.number})).data
            const isPrApproved = labels.find( ({ name }) => name === 'pr/approved' ) !== undefined
            console.log(`PR > isPrApproved: ${isPrApproved}`)
            if(isPrApproved === false) {
              core.notice('Pull Request not approved for deployment. Add a "pr/approved" label to the PR when ready to deploy to production.')
              # core.setFailed('Pull Request not approved for deployment. Add a "pr/approved" label to the PR when ready to deploy to production.')   
            }

  deploy-prod:
    # If PR has been deployed in dev and test environment, and has been approved - we deploy to production.
    # IMPORTANT NOTE: We assume that since pr/approved has been set manually, that the required builds, tests
    # etc. has been done!
    # TODO: We actually only want this to only run this once all other workflows have completed succesfully!!
    needs: [approve]
    runs-on: ubuntu-20.04
    steps:
      - name: Set Variables
        shell: bash
        run: |
          echo "SUFFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          const [repository_owner, repository_name] = process.env.GITHUB_REPOSITORY.split('/')
          const labels = (await github.issues.listLabelsOnIssue({owner: repository_owner, repo: repository_name, issue_number:context.payload.pull_request.number})).data
          const isPrApproved = labels.find( ({ name }) => name === 'pr/approved' ) !== undefined
          console.log(`PR > isPrApproved: ${isPrApproved}`)
          if (isPrApproved === false) {
            core.notice('Pull Request not approved for deployment. Add a "pr/approved" label to the PR when ready to deploy to production.')  
          } else {
            echo Login
            oc login "${{ secrets.OPENSHIFT_CLUSTER }}" --token="${{ secrets.OC4_PROD_TOKEN }}"
            echo Promote
            bash openshift/scripts/oc_promote.sh ${SUFFIX} apply
            bash openshift/scripts/oc_promote_ubuntu.sh ${SUFFIX} apply
            echo Provision database
            CPU_REQUEST=75m CPU_LIMIT=2000m MEMORY_REQUEST=2Gi MEMORY_LIMIT=16Gi PVC_SIZE=45Gi PROJ_TARGET=e1e498-prod bash openshift/scripts/oc_provision_db.sh prod apply
            echo Deploy API
            CPU_REQUEST=50m CPU_LIMIT=500m MEMORY_REQUEST=2Gi MEMORY_LIMIT=3Gi REPLICAS=3 PROJ_TARGET=e1e498-prod bash VANITY_DOMAIN=psu.nrs.gov.bc.ca SECOND_LEVEL_DOMAIN=apps.silver.devops.gov.bc.ca ./openshift/scripts/oc_deploy.sh prod apply
            echo Env Canada Subscriber
            PROJ_TARGET=e1e498-prod bash openshift/scripts/oc_provision_ec_gdps_cronjob.sh prod apply
            PROJ_TARGET=e1e498-prod bash openshift/scripts/oc_provision_ec_hrdps_cronjob.sh prod apply
            PROJ_TARGET=e1e498-prod bash openshift/scripts/oc_provision_ec_rdps_cronjob.sh prod apply
            echo C-Haines
            PROJ_TARGET=e1e498-prod bash openshift/scripts/oc_provision_c_haines_cronjob.sh prod apply
            echo BC FireWeather cronjobs
            echo Run forecast at 8h30 PDT and 16h30 PDT (so before and after noon)
            PROJ_TARGET=e1e498-prod SCHEDULE=\"30 15,23 * * *\" bash openshift/scripts/oc_provision_bcfw_p1_forecasts_cronjob.sh prod apply
            PROJ_TARGET=e1e498-prod SCHEDULE=\"15 * * * *\" bash openshift/scripts/oc_provision_bcfw_p1_hourly_actuals_cronjob.sh prod apply
            echo Configure backups
            PROJ_TARGET=e1e498-prod BACKUP_VOLUME_SIZE=50Gi CPU_REQUEST=1000m CPU_LIMIT=2000m bash openshift/scripts/oc_provision_backup_postgres.sh prod apply
            PROJ_TARGET=e1e498-prod CPU_REQUEST=1000m CPU_LIMIT=2000m bash openshift/scripts/oc_provision_backup_postgres_cronjob.sh prod apply
            PROJ_TARGET=e1e498-prod CPU_REQUEST=50m CPU_LIMIT=500m BACKUP_VOLUME_SIZE=3Gi bash openshift/scripts/oc_provision_backup_mariadb.sh prod apply
            PROJ_TARGET=e1e498-prod CPU_REQUEST=50m CPU_LIMIT=500m bash openshift/scripts/oc_provision_backup_mariadb_cronjob.sh prod apply
            echo Configure 
            PROJ_TARGET=e1e498-prod CERTBOT_STAGING=false DRYRUN=false bash openshift/scripts/oc_provision_certbot_cronjob.sh prod apply
          }
