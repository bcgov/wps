// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.245.0/containers/docker-existing-dockerfile
{
	"name": "Existing Dockerfile",
	// Sets the run context to one level up instead of the .devcontainer folder.
	"context": "..",
	// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.
	"dockerFile": "../Dockerfile",
	// make sure you don't have any local .venv in wps/api or it won't work
	// note: we don't use a workspace mount because then you'll only see the files in /api, when
	// you probably want to see everything. This means you must cd from /workspace to /app in order
	// to actually run things though. the following mount will at least make the /app folder in the
	// docker container change when files in api change.
	"mounts": [
		"source=${localWorkspaceFolder}/api,target=/app,type=bind"
	],
	"remoteUser": "worker",
	"containerUser": "worker",
	"updateRemoteUserUID": false, // without this you wind up as ubuntu user
	// this lets the container access the database container. On linux I had to configure the db
	// host to localhost for it to work in the .env file in api/app
	// tested with the database running from the docker-compose file with `docker compose up db`
	"forwardPorts": [
		8080
	],
	"runArgs": [
		"--network=host",
		"--platform",
		"linux/amd64",
		"--hostname=wps-dev",
	],
	"postCreateCommand": "echo 'cd /app' >> ~/.bashrc",
	// by default the dockerfile sets the shell to /bin/sh - you can use whatever you like here
	// but if you use bash, it will automatically set you in the /app folder rather than workspace
	// when the terminal connects
	"customizations": {
		"vscode": {
			"settings": {
				"terminal.integrated.defaultProfile.linux": "bash",
				"terminal.integrated.profiles.linux": {
					"bash": {
						"path": "/bin/bash"
					}
				}
			}
		}
	}
}